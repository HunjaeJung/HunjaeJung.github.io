<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>그냥 하자</title><link>/</link><description></description><atom:link href="/feeds/hunjae.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 22 Jun 2015 00:00:00 +0200</lastBuildDate><item><title>(주)두부한모 (Apot.Inc)</title><link>/judubuhanmo-apotinc.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;2012년 한 해는 고등학교 동창들과 창업을 하겠다고 휴학을 한 해이다. 2011년 복학 후 2번째 학기를 마무리해 갈 무렵, 그리고 &amp;#39;수학&amp;#39;이란 전공에 회의를 느낄때 즈음, 굉장히 시기적절하게 무진이에게 전화가 왔다. &amp;#39;&amp;lt;배달의 민족&amp;gt;이란 스타트 업이 있는데, 2달만에 만들었다더라. 그리고 대박이 났다더라. 우리도 다음학기 휴학하고 어플리케이션을 사업을 해보자!&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;그렇게 시작되었다. 창업 멤버는 고등학교 동창들이었다. 나를 포함해서 4명. 회사 이름은 (주)두부한모다. 두부한모는 사실 우리 고등학교 2학년 친구들 동창회 이름이다. '&lt;strong&gt;두&lt;/strong&gt;달에 &lt;strong&gt;부&lt;/strong&gt;득이해도 &lt;strong&gt;한&lt;/strong&gt;번은 &lt;strong&gt;모&lt;/strong&gt;이자'는 의미를 가진. 그 동창회에 12명이 있는데, 그 중 4명이 창업 멤버였다. 회사 이름 정할때 다른 이름도 많이 거론되었었는데, 결국 우리 입에 잘 맞는 '두부한모'로 하기로 했다. &lt;/li&gt;
&lt;li&gt;2012년 1월 2일, 4명은 서현역 오피스텔에 모였다. 보증금 1000에, 월세 70의 서현역에서 가까운 복층 구조 오피스텔이었다. 학교 앞에서 자취하던 방빼서 나온 보증금에 얼마씩 보태서 보증금내고, 월세는 각자 과외나 알바같은거 하나씩해서 냈다. 그렇게 복층 구조의 오피스텔에서 위층에선 잠을 자고, 아래층에선 코딩을 시작했다.&lt;/li&gt;
&lt;li&gt;우습게도 앱 사업하겠다고 오피스텔까지 빌린 우리에겐 제대로 된 컴덕(컴퓨터 덕후)이 없었다. 4명의 전공은 전기 전자, 컴퓨터 교육, 수학(나), 그리고 화공과 친구였다. 그나마 컴퓨터를 좀 배운 컴퓨터 교육과 친구의 주도아래, 프로그래밍 문제를 풀기 시작했다. 지금도 기억나는 건 C언어로 배열 Sorting하는 방법, 인공지능 baseball game 만들기, java로 부산 지하철역 최단거리 구하기였다. 개별로 문제를 풀기도하고, 팀별로 풀기도 했는데, 꼭 서로의 코드 리뷰는 했다. 왜 이렇게 짰고, 누구의 코드가 더 효율적인지. &lt;/li&gt;
&lt;li&gt;그렇게 한 4주정도 한 것 같은데, 우리에겐 더 확실한 목표가 필요한 것 같았다. 그러다 신문에서 거금의 상금이 걸린 삼성의 공모전을 보았다. &lt;strong&gt;'Bada 스마트 캠퍼스 라이프 공모전'&lt;/strong&gt;. 꼴찌(스마트 캠퍼스 라이프 상, 10팀 이상)만 해도 500만원이었다. Bada는 삼성이 자체 개발한 OS인데, 안드로이드 플랫폼을 벗어나 자체 생태계를 만들기 위한 삼성의 작전이었다. 그래서 어마어마한 상금(총 상금이 몇 억 되었던 것 같다.)을 걸고, 어플리케이션 공모전을 낸 것이다. &lt;/li&gt;
&lt;li&gt;상금은 좋았는데, 프로젝트를 진행하면서 참고할 수 있는 자료가 너무 적었다. 서점에 관련 서적은 1~2권 정도였고, 물어볼 곳이라곤 네이버 Bada 카페뿐이었다. 그러다 선릉역 근처 SDS 멀티캠퍼스에서 바다 강의가 1주일동안 있다고해서 들으러 다녔다. 처음 개발해보는 앱인지라 갈급했던 부분들이 많았는데, 물어볼 곳이 있다는 것은 참으로 행복하다는 것을 깨달았다. 우리는 2명/2명씩 팀을 나눠 프로젝트를 진행했다. 4명이 앱 하나 만들긴 아까운 것 같아서, 공모전에 두개를 내는 작전을 택했다. 1등보단 꼴지상금(500만원)*2개를 목표로.. 대학생들을 주제로, 학교 수업 스케쥴러(시간을 다스리는 자)과 과외 학생 스케쥴러(과외 다이어리)를 개발했는데, 디자인 튜닝을 받은 '시간을 다스리는 자'가 상을 받을 수 있었다. 500만원은 세금을 제하고, 디자인해준 친구에게 사례금을 전하고, 정확히 4등분하여 나눠가졌다. 우리가 처음 올린 수익이었다.&lt;/li&gt;
&lt;li&gt;사실 바다 앱 개발 도중, (개인적으로) 고난의 시간이 왔었다. 1달정도 개발을 진행하고 있을 때, 도저히 이대로 가다간 안되겠다 싶었던 때가 있었다. 이유는, 우리에게 꿈이 없어서 그랬다. 창업을 마음먹었는데, 해결하고 싶은 문제도, 꿈도 없다니. 있을 수 없는 일이었다! 우리의 궁극적인 목표가 공모전이 아니었기에, 이대로 생각없이 있다가 공모전이 끝나면 붕 뜰 것 같았다. 그렇게 우왕좌왕하다가 한 학기동안 프로그래밍 좀 해봤네~ 하고 학교로 돌아갈 것 같은 그림이 너무 무서웠다. 가장 답답했던 날 친구들한테 말도 안하고 출근을 안했다.(미안..) 아마 그날 동생 학교 입학식이었을거다. 그래서 답답한 마음에 바람도 쐴 겸 춘천에 갔고, 저녁에 서현으로 돌아왔다. 친구들이랑 같이 저녁을 먹고, 답답했던 이야기를 털어놨다. 친구들도 나름의 고민이 있었고, 그렇게 그때 각자 이곳에서 이루고 싶은 바를 공유했다. 휴학하고 지금 우리가 여기 있는 동안, 자신에게 가장 중요한 가치는 무엇인지. 돈을 버는 것인지, 프로그래밍 실력을 늘리는 것인지, 아니면 어떤 가치를 창출하고 싶은 것인지. 터놓고 이야기했다. 그리고 작전을 좀 변경해, 바로 그 다음날부터 우리의 꿈을 세우는 아이디어 회의에 돌아갔다. 그렇게 아이디어 회의와 바다 앱 개발이 병행되었던 것이다.&lt;/li&gt;
&lt;li&gt;여러가지 아이디어들이 나왔다. 거의 한 달 반동안 매일 한명이 하나의 아이디어는 가지고 왔으니까, 정말 많은 아이디어들이 나왔던 것 같다. 각자의 아이디어를 발표하고, 서로 점수를 매겼다. 그리고 80% 이상의 점수를 획득한 아이디어들을 모아 최종 투표를 하고, 그 중에서 각자 하나씩 맡아 최종 pt를 하기로 했다. 그때 '온라인 포트폴리오'가 내가 맡은 아이디어였고.  (사용자의 작품이나 프로젝트 위주의 linked in이라고 보면 될 것 같다.) 친구들은 (내 기억이 맞으면) 기쁨 기록 SNS, 알바생 평가 어플리케이션, 위치기반 쿠폰제공 서비스였던 것 같다. 아무튼 각자 그렇게 본인의 아이디어를 피력하기 위한 준비를 했고, 외부 친구들을 초대해 평가를 받았기도 했다. &lt;/li&gt;
&lt;li&gt;우리는 전문가에게 객관적으로 아이디어를 검증받고 싶어했고, 무턱대고 고벤쳐의 고영하 회장님께 메일을 보냈다. 마음 넓으신 고영하 회장님은 감사하게도 본인의 사무실로 우리를 초대해주셨고, 우린 고회장님 앞에서 간략하게 자신들의 아이디어를 피력할 시간을 가졌다. (그때 고회장님이 눈을 감고 우리 이야기를 들어주셨는데, 굉장히 인상적이었다. 눈을 감고 머리속으로 우리 이야기를 그리시는 것 같았다.) 우리가 이야기를 하는 중간중간 굉장히 날카로운 질문을 하셨는데, 우린 누구 하나 자신의 논리를 제대로 방어한 사람이 없었다. 그렇게 우린 굉. 장. 히. 털렸고, 자신감이란 녀석은 마음 아래 지하 세계로 캠핑을 떠났다.&lt;/li&gt;
&lt;li&gt;정말 자신감이 바닥이었다. 하물며 아이디어가 괜찮았다 싶더라도, 구현 능력이 되는지도 우리들 스스로 의문이었다. 2달만에 만들어서 대박났다는 배달의 민족이야기는 것은 말을 철썩같이 믿었던 것은 신화와 과장된 이야기를 좋아하는 우리의 습성때문이었으리라. &lt;a href="http://www.kosen21.org/nwebzine/webzine_view.jsp?webzine_seq=44&amp;amp;board_seq=409&amp;amp;data_seq=824"&gt;뉴턴이 사과만 보고 만유인력을 알아내고, 아인슈타인이 하루 아침에 상대성 이론을 풀어낸 것이 아니다.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;그렇게 우리의 찰진 인생을 바라보지 못하고 있던 기간, 창업을 하셨다는 취발이의 학교 선배와 연락이 닿았다. 고등학교 친구들끼리 뭐 좀 해보겠다고 서현에 모여 작당모의하고 있는 모습이 웃기셨는지, 그 선배(정훈이형)와 공동창업자(준석이형)가 자정이 넘은 시간에 목동에서 우리가 있는 서현역으로 차를 끌고 오셨다. 그렇게 새벽 4시까지 커피숍에 모여 이야기를 했던 것 같다. 여러 이야기를 나눴지만, 결론은 너네는 아는게 너무 없으니 형네 회사 빈 자리에 앉아 배우면서 창업할 수 있도록 하라는 것이었다.&lt;/li&gt;
&lt;li&gt;고민은 했지만, 결정을 빨랐다. 왜냐면 다른 옵션이 딱히 없었기 때문이다. 우리 넷은 회의 2시간만에 형네 회사가 있는 가산에 다음날부터 출근하기로 결정했다. 그때가 4월이니, 그때부터 약 7개월정도 &amp;lt;두부한모 in 퍼플웍스&amp;gt;였다. (형네 회사 이름이 퍼플웍스였다)&lt;/li&gt;
&lt;li&gt;형들은 회사에 빈 4자리를 내주셨고, 알아서 공부하면서 모르는 것들 물어보라고 하셨다. 그 때 웹을 공부했다. php, jsp, asp.net, javascript, html, css...처음 들어보는 이런 것들에 대해 알아가고, 다 같이 게시판 만들기부터 시작했다.(형네 회사가 .net 프레임워크를 사용해서 asp.net MVC3가 가장 그 당시 환경에서 잘 배울 수 있는 것이었다.) 그리고 그 때 깨달았다. 뭐든 처음엔 진짜 잘 모르겠고, 무진장 어려워도 2달 정도면 어느정도 익숙해진다는 것을.&lt;/li&gt;
&lt;li&gt;어느 정도 실력이 되자 형들이 일 좀 해보겠냐고 했다. 물론 정당한 페이는 주시고. 그렇게 이랜드 리테일 어플리케이션과 대학병원 설문조사 앱을 만들게 되었다.(포트폴리오에 쓰게 좀 남아있으면 좋으련만, 서버를 남겨두지 않아 안 남아있다.) 그때 그 일이 클라이언트에 의한 내 인생 첫 외주였고, 중3 때 했던 KFC 알바와 과외를 제외한 첫 돈벌이었다. 어느 정도 전문적이었던!&lt;/li&gt;
&lt;li&gt;외주를 하면서, 몇명은 우리 팀을 위한 일들을 계속했다. 정부지원사업에 지원했고, 운이 좋게도 '예비기술창업자 육성사업'에 합격할 수 있었다. 5000만원 이라니! 맥북이라니! 월급이라니! 정말 기분 좋은 날이었다.&lt;/li&gt;
&lt;li&gt;시원한 바람이 불어오는 가을 무렵, 퍼플웍스를 졸업할 때가 된 것 같았다. 형들로부터 정말 많이 배웠고, 돈도 어느정도 벌어둔 터였다. 그렇게 퍼플웍스에 들어온지 7개월만에 독립을 시도했고, 다시 한번 운이 좋게도 컨텐츠 진흥원에서 지원해주는 사무실에 입주할 수 있게 되었다. 출사 당시 우리 아이템은 &lt;strong&gt;'대학 강의실 속 소통의 부재'&lt;/strong&gt;란 문제 의식에서 출발한 'Bridge in Class' = BICL(비클) 이었다. '교실에 소통의 다리를 놓자'는 의미를 가진 이름이었다.&lt;/li&gt;
&lt;li&gt;2달 동안 정말 열심히 개발만 했다. 이젠 4명의 개발자로 이루어진 팀이라 내놓을 개발력밖에 없었기 때문에 밤낮없이 계속 개발만 했다. &lt;strong&gt;그런데 그게 문제였다.&lt;/strong&gt; 비클은 총 3가지 핵심 기능이 있었는데, (1)실시간 이해도 파악 / (2) 질문하기 / (3) 퀴즈보기 였다. 기획과 동시에 개발에 들어가서 정말 앞뒤안가리고 기능을 완성시켰다. 그리고 서울 시내 약 100명의 교수들에게 무작위로 메일을 보냈고, 약 열댓분의 교수님들께 답장이 왔으며, 3명의 교수님들과 직접 만나볼 수 있었다. &lt;/li&gt;
&lt;li&gt;이메일 혹은 직접 만나 들었던 피드백은 굉장히 일관적이었다. &lt;strong&gt;부정적으로.&lt;/strong&gt; 일단 수업 시간에 모바일을 사용한다는 컨셉 자체에 거의 경기를 일으키시는 교수님도 계셨고, 시도는 참신하지만 수업 시간 내내 이해도나 질문 오는지를 파악해야 하는것이 굉장히 방해스러울 것 같다는 의견이 지배적이었다. 결국 2달 동안의 개발은 휴지조각처럼 버려졌고, 또 다시 좌절을 맛보아야했다. (린 스타트업을 알았더라면..)&lt;/li&gt;
&lt;li&gt;팀내 분위기가 좋지 않았다. 이대로라면 복학까지 2달정도 남았는데, 차라리 겨울에 다른 회사 들어가서 인턴을 해보는게 낫지 않겠냐는 의견도 나왔다. 아 그런데 너무 아쉬웠다. 지금 돌아가면 지난 1년이 너무 아쉬울 것 같았다. 그래서 남은 2달동안 '이게 안되면 수업시간에 모바일 사용은 안된다'는 마음가짐으로, 선택과 집중의 총력전으로 가기로 했다.&lt;/li&gt;
&lt;li&gt;다른 잡스러운 기능들을 버렸고 '퀴즈보기'기능만 남겼다. 피드백을 받았던 것 처럼 수업 시간 내내 보고 있지 않아도 되고, 간단한 퀴즈는 종이를 나눠주고 다시 걷어서 채점하는 것보다 훨씬 효율적일 것 같았기 때문이다. 그렇게 로그인 없이 간단한 코드 입력으로 퀴즈를 볼 수 있는 기능과 채점/통계 기능을 제공하는 방향으로 다시 프로젝트를 진행했고, 릴리즈 후 몇몇 대학의 교수학습센터에 소개되고, 실제 4-5군데의 수업에서 한학기동안 사용되는 것으로 우리의 창업은 매듭지어졌다.&lt;/li&gt;
&lt;li&gt;아쉬운 점도 많았지만 배운 점도 정말 많았고, 무엇보다 가장 큰 수확은 컴퓨터 공학을 복수전공하겠다는 굳은 결심이었다.(지금 생각해보면 그때 도대체 어떻게 코딩했는지 싶다..) 그리고 앞으로 다시 창업을 한다면 기술 창업을 하겠다는 의지와 '내가 정말 가치있는 문제를 풀고 있는가'하는 문제 의식의 중요성도 1년 간의 창업을 통해 얻은 중요한 수확들 중 하나였다.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Mon, 22 Jun 2015 00:00:00 +0200</pubDate><guid>tag:,2015-06-22:judubuhanmo-apotinc.html</guid><category>Learn by doing</category></item><item><title>[Project] 빛 없는 마을에 빛 전하기</title><link>/project-bic-eobsneun-maeule-bic-jeonhagi.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;이 프로젝트의 발단은 2013년 여름 TIDE ACADEMY에서 만난 소외된 계층에 관심이 많던 친구로 부터 시작되었다. 그 친구는 가로등이 없어 길이 어두운 마을에 태양광 LED를 달아주는 프로젝트를 기획했고, 나는 그 의도가 마음에 들어 그 프로젝트에 참여하게 되었다. 그 뒤 문제점을 제대로 인식하기 위해 직접 강남구 개포동 &amp;#39;구룡마을&amp;#39;에 가게 되었다.
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;말로만 듣던 판자촌이었다. 그곳의 외관은 마치 전쟁 직 후 모습같았다.(물론 내가 전쟁 직 후 마을을 본 적은 없지만, 그만큼 낙후되어보였다.) 한 집 건너 한 집이 폐가였고, 가로등도 넉넉하지 못해 길을 다닐때도 상당히 위험해보였다. 더군다나 할머니 할아버지들만 살고 있을 줄 알았던 동네는 갓난 아기부터 할머니 할아버지까지 모든 세대가 살고 있었다. 도대체 어떻게 수도 서울, 그것도 부자 동네로 둘째가라면 서러울 강남에 이런 곳이 있을 수 있는지 정말 의문이었다. 더욱이나 아이러니했던 것은 &lt;a href="https://mirror.enha.kr/wiki/%EA%B5%AC%EB%A3%A1%EB%A7%88%EC%9D%84"&gt;판자지붕 사이로 보이던 도곡동 타워펠리스&lt;/a&gt;였다. 묘한 감정이 나를 싸고 돌았다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;기술이란 무엇인가? 왜 많은 사람들이 기술을 정의할 때, '문제를 해결하는 방법'이라고 정의함에도 불구하고, 기술은 왜 문제가 많은 곳이 아닌 자본이 많은 곳에 집중되고 발전하는가?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;사실 구룡마을은 논란의 소지가 많은 동네이다. 무허가 판자촌으로, 사람들이 막무가네로 들어와 산지가 십수년 이상이고, 그 중에는 밖에선 외제차끌고 다니면서 보상을 노리고 들어온 부동산 꾼들이 많은 것도 사실이다. 자세한 내막은 모르지만, 관련하여 주민들간의 마찰도 심해보인다. &lt;/li&gt;
&lt;li&gt;어떤 상황도 부정적으로 보기 시작하면, 끝도 없이 부정적으로 보인다. 물론 실제로 부정적일 가능성이 굉장히 높은 몇 가지 팩트들이 존재하기 때문에 그렇게 보기 시작할 것이다. 하지만 그런식으로(어떻게보면 나 편하자고 만들어진) 색안경에 가려진 더 중요한 진실들은 어쩔것인가. 아무리 크기가 적고, 수가 적어도 반드시 고쳐져야할 문제들이 존재한다. 작은 상처도 오래두면 곪는 법이다. 삶의 방식으로 선택해야 하는 문제인 것 같다. 상황을 긍정적으로만 바라봐서 상처를 입을 수도 있다. 하지만 어떻게 생각하며 사는 삶이 행복한 삶일지는 내가 선택해야하는 문제다. 다만 난 부디 내가 속한 지구에 무책임한 사람이 안되었으면 한다. &lt;/li&gt;
&lt;li&gt;답사를 갔을 때 기억에 남는 할머님이 한 분 계신다. 주민들이 거주하고 있는 집들과는 조금 동떨어진 집에 홀로 살고 계셨다. 그 할머니가 살고계신 집 골목에 사람이 많이 안 살아서 그런지, 가로등은 그쪽에 빛을 비추지 않았다. 그래서 집 문 밖에 후레쉬가 달려있었는데, 그게 없으면 도저히 밤엔 길을 다닐 수가 없어보였다. 우리가 갈 때 즈음, 할머니는 꼭 좀 도와달라고 하셨다. 몇번은 반복하셨던 것 같다. 꼭 좀 도와달라고. 우리는 '알겠습니다'하고 비장하게 돌아섰다. 그 이후 TIDE 아카데미에서는 이러한 좋은 취지를 좋게 봐주셨는지, (그닥 훌륭하지 않았던) 태양광 LED 프로토타입을 만든 우리에게 1등을 줬다. &lt;/li&gt;
&lt;li&gt;하지만 우리는 문제가 발생했던 그곳으로 다시 돌아가지 않았다.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;li&gt;잠시 다른 이야기 좀 하겠다. 군대를 다녀오고 2학년 때 학교에서 1년동안 SIFE(Student in Free Enterprise, 지금은 Enactus로 이름을 바꿨다.) 활동을 한 적이있다. &lt;strong&gt;'기업가 정신을 통해 사회적인 가치를 만들어내자'&lt;/strong&gt;는 아주 취지 좋은 글로벌 동아리였다. 헌데(내가 많이 부족해서 그랬겠지만) 나는 많은 프로젝트가 대학생들의 책임감 부족 + 능력(보통은 기술) 부족으로 그저 취지 좋았던 1회성 대학생 퍼포먼스로 끝나는 것들을 많이 보았다. &lt;/li&gt;
&lt;li&gt;우리가 다시 한번 퍼포먼스로 끝난 것 같았다. '알겠습니다'하고 돌아설 땐 반드시 좋은 LED를 만들어 '이 동네를 밝히리라' 생각하고 이곳으로 돌아오리라 했지만, 부끄러울만큼 점점 열정은 식어갔다. 사실 그때 열정이 식었던 가장 큰 이유는 (적어도 나에게는) 기술력 부족이었다. 나는 태양광이든 PCB든 하드웨어 쪽으로는 다룰 수 있는 것이 없는 소프트웨어 코찔찔이었다. 진지하게 하드웨어를 다루고 싶다고 생각했던 것이 그때부터였던 것 같다. &lt;/li&gt;
&lt;li&gt;방학이 끝났고, 학교로 돌아왔다. 그리고 얼마 후 학교 전인교육원에서 공고가 하나 떴다. 학부 연구 프로젝트를 선정하여,  해외 답사(무려 팀당 800만원..)를 지원해준다고 했다. 내가 꽃인 주제는 '융합'('종교', '친환경' 등 다른 것들도 많았다.)이었는데, 지난 프로젝트를 기술과 함께 엮을 수 있을 것 같았다. 그렇게 또 한번 하드웨어를 만들겠다는 포부와 함께 구룡마을에 가서 느꼈던 감정을 담아 '빛 없는 마을에 빛 전하기' 프로젝트 기획서를 제출했고, 감사하게도 학교의 지원을 받을 수 있었다.&lt;/li&gt;
&lt;li&gt;그렇게 인도에 가게 되었다. 많은 국가 중 인도를 선택한 이유는, 세계 최고의 빈부격차 국가이면서도 실리콘 벨리에서 활동하는 많은 엔지니어들의 국가였기 때문이다. (사실 이건 조금 포장이 있고, 1학년 때 한 번 다녀왔었는데 또 한번 가고 싶었다. 인도 매력있음..)&lt;/li&gt;
&lt;li&gt;아트엔테크놀로지학과 친구들 3명이랑 함께 다녀왔는데, 우리 여행은 사뭇 진지했다. 출국 전 꽤나 열심히 프로토타입들을 준비했고, IIT 공대(첸나이) 페이스북에 접속해서 무차별 메시지 공격으로 인터뷰어를 선정했다. (지금 생각해보면 약간 미쳤던 것 같은데, 정말 흥쾌히 승락해준 IIT 항공우주공학과의 Akinash에게 경의를 표하는 바이다.) 그렇게 첸나이 공항에 도착해서, 2주동안 정말 많은 일들이 있었는데, 그 중에 내 뇌 속에 깊이 새겨진 2가지 일만 기술해보겠다.&lt;/li&gt;
&lt;li&gt;[오로빌] 첸나이에 이어 두번째로 도착한 남인도 폰디체리. 그리고 그곳에서 조금 떨어진 곳, 오로빌이라는 생태 도시가 있다. 이곳은 지구촌 누구나 와서 살 수 있는 인류 공동체를 목표로 하는 도시이고, 종교, 인종, 교육이나 부의 수준 등에 상관없이 모든 인류가 평등하게 살 수 있는 공동체를 지향한다. 재미있는 점은 공동체 내에서 화폐를 사용하지 않으며, 자신이 커뮤니티에 얼마나 기여했느냐에 따라서 자신이 얻고 싶은 것을 얻을 수 있다. 집도, 음식도, 책이나 요가 강습 같은 여가생활도.. 아무튼 이곳에서 있었던 일이다.&lt;/li&gt;
&lt;li&gt;이곳의 초등학교 아이들은 자연과 함께 살아가는 특별한 교육을 받는다. 자세히 아는 것은 아니지만, 과목명이 '나무와 친해지기' 같은게 있는걸로 봐서는 우리나라에서 생각하는 교육을 받는 것 같지는 않다. 여하간에 이 친구들의 선생님들과 어떻게 연락이 닿아서, 이 오로빌 마을의 초딩 친구들과 이틀에 걸쳐 함께 야외활동을 하기로 했다. 드디어 한국에서 가져간 프로토타입 자랑할 시간. 총 3가지를 준비해갔는데, (1)꿈 그리기 / (2)LED Throwies / (3)풀로 악기만들기 였다. (1)꿈 그리기의 경우, 우리가 미리 만들어간 밑그림에 애들이랑 같이 색칠하고 그림 그리는 것이었고, (2)LED Throwies의 경우 자석+LED+3V원형건전지+테잎으로 만든 장난감, 마지막으로 (3)풀로 악기 만들기는 makey makey라는 전자기판을 사용한 건데 전기가 통하는 어떤 물질이건 연결만하면 키보드로 사용할 수 있어서, 그걸 악기음으로 매핑시켜 가능한 일이었다. 사진에서 볼 수 있겠지만, 정말 재미있게 놀았고 하루 종일 뿌듯했다. LED 나눠줄때는 애들이 그거 가지고 뛰어노는데 뭔가 지구 한구석에서 잘하고 있다는 생각이 들어서 흥분되어 잠도 잘 못잤다. &lt;/li&gt;
&lt;li&gt;다음날, 이틀째 야외 활동을 아이들과 함께 했다. 같이 또 그림도 그리고 음악도 만들면서 재미있게 놀았다가, 애들한테 학교에서 가져온 팔찌를 나눠주려고 했다. 그때 선생님이 물었다. &lt;strong&gt;'혹시 이거 몇개나 있나요? 여기 애들 다 나눠주고 남을 만큼 있으신가요?'&lt;/strong&gt;  나는 그 만큼은 없다고 했고, 선생님은 내가 나눠주던 팔찌를 다시 아이들로부터 뺏었다. 그리고 말했다. &lt;strong&gt;'어제 나눠주신 LED때문에 애들이 집에가서 싸웠습니다. 양이 충분하지 않다면 나눠주지 않는 것이 좋을 것 같습니다.'&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;나는 뒷통수를 한 대 세게 맞은 기분이었다. 충격적이었다. 그러한 사실이 너무나도 공감되었고, 거기까지 미처 생각하지 못해서 너무 미안했다. 나는 나름 돕는다고 했지만, 결국 불화만 일으키고 간 꼴이 되어버린 것이다. 누군가를 돕는다는 것이 그렇게 쉬운 것이 아니라는 사실을 다른 의미에서 다시 깨달은 순간이었다. &lt;/li&gt;
&lt;li&gt;[뭄바이] 뭄바이는 인도 최대의 상업도시이다. 그리고 동시에 세계 최고의 빈부격차를 자랑하는 도시이기도 하다. 뭄바이 그 큰 도시 60% 인구가 도시 면적의 6%(슬럼 지역)에 몰려있다고 하면 어느 정도 일지 감이 오는가. 영화 '슬럼독 밀리어네어'의 배경도 인도 뭄바이다. 뭄바이에서 슬럼 투어를 했다. &lt;a href="http://realitytoursandtravel.com/"&gt;'리얼리티 투어'&lt;/a&gt;라는 사회적 기업을 통해, 슬럼가 출신의 가이드와 반나절동안 슬럼가를 둘러보는 일정이었고, (회사의 수입 80%는 슬럼 지역 재개발 및 아이들 교육에 사용된다고 한다.) 우리는 &lt;a href="https://www.youtube.com/watch?t=10&amp;amp;v=ODqura82eC8"&gt;Balaji&lt;/a&gt;라는 친구와 함께 투어를 시작했다. 그곳은 구룡마을보다 더 한 곳이었다. 건장한 성인 한명이 들어서면 아무도 지나가지 못할 폭의 골목길이 계속해서 이어졌고, 집은 하나의 사업체가 되어 쓰레기 재활용장이나 가죽공장 등으로 이용되었는데 아이들은 물론 어른들에게도 그닥 좋지 못한 환경처럼 보였다. 집안에서 플라스틱을 태우고, 동물들의 가죽을 벗겼으니 말이다. 지나가다가 어느 집 안에서 세상에서 가장 무기력하게 앉아있는 할아버지와 아이를 보았다. 모르긴 몰라도, 이곳 분위기로 봐서는 하루 종일 왠지 그러고 있을것만 같았다.&lt;/li&gt;
&lt;li&gt;'우리는 무엇을 위해 열심히 사는걸까. 저렇게도 살아질텐데..'&lt;/li&gt;
&lt;li&gt;투어를 마치고 돌아와 함께 했던 친구들하고 꽤나 깊은 얘기를 나눴다. &lt;/li&gt;
&lt;li&gt;나는 처음에 그 사람들이 불쌍하다고 생각했다. 그랬더니 한 친구가 그런다. 어떻게 감히 불쌍하냐고 생각하냐는 것이다. 너무 거만한 생각아니냐며.. 그들도 그들 나름대로의 행복한 삶을 살 것이라고. 그러고 나서 내가 '아무리 그래도 이건 아닌것 같다고, 다들 그렇게 나름의 행복한 삶을 산다고 생각해버리면 이 세상엔 아무 문제도 없는 것 아니냐'고 반박했던 것 같다. &lt;/li&gt;
&lt;li&gt;나중에 생각해보니 그 친구말도 나름 일리가 있었다. 가난이란 것도 상대적인 것인데, 결국 내가 그 사람들을 바라보는 것보다 빌 게이츠가 나를 보는 것이 더 가난해보이는 것이었다. 인류 전체가 쓰레기 더미 위해 살면, 그게 정상적인 것이고 보편적인 것이다. &lt;/li&gt;
&lt;li&gt;[인도 여행 결론] 사실 인도라는 나라는 정말 복잡하다. 특히나 종교 문제를 이야기 안 할 수 없는데, 힌두교 정체성이 나라의 경제적 성장을 막고있다는 생각은 확실하게 들었다. 인도 공화국이 선포되면서 법적으로는 카스트가 없어졌다고 하지만, 사람들 이름 성만 들어도 어떤 계급인지 알고, 차별 또한 여전하다고 한다. 내가 만약 빨래터의 아들로 태어났으면, 평생을 빨래터의 아들로 일해야만 가족이 평안하고 다음 생에 더 좋은 삶을 영위할 수 있다는 뿌리 깊은 믿음이 박혀있다. 그렇기 때문에 애초에 신분 상승은 꿈꾸지도 않는다. &lt;/li&gt;
&lt;li&gt;'기술'이란 단어에 물음표를 찍고 인도에 넘어왔고, 돌아갈때 그에 대한 나름의 해답을 찾을 줄 알았건만 '기술'의 물음표는 더 커졌고, 사회/문화/종교/교육/정치/역사/경제.. 모든 단어에 물음표를 찍어왔다. 사실 사회 문제라는 것이 많은 사람들과 분야들간에 톱니바퀴처럼 맞물려 생기는 것이라 어느 한 사람, 혹은 어느 한 분야만 가지고는 해결할 수 없는 것이었다. 기술만 가지고 무언가를 해보겠다고 달려들었던 어린날의 치기를 돌이켜본다. &lt;/li&gt;
&lt;li&gt;나는 분명 기술의 힘을 믿는다. 앞으로도 계속 그렇게 믿고 공부할거다. 인류를 진보시키는 것도 기술이고, 우리 삶에 풍요를 가져다 준 것도 기술이다. 하지만, 기술은 항상 사람에 대한 깊은 고민에서 출발해야한다. 사람이 먼저고 기술이 다음이다. 그것이 인도가 나에게 준 생각이었다.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Mon, 22 Jun 2015 00:00:00 +0200</pubDate><guid>tag:,2015-06-22:project-bic-eobsneun-maeule-bic-jeonhagi.html</guid><category>Learn by doing</category></item><item><title>Neo4j 'WITH'</title><link>/neo4j-with.html</link><description>&lt;p&gt;&lt;img alt="cypher-with-graph.svg" src="http://neo4j.com/docs/stable/images/cypher-with-graph.svg" /&gt;&lt;/p&gt;
&lt;p&gt;아래의 쿼리는 위의 관계도를 만드는 Cypher 쿼리입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;create (_0 {`name`:&amp;quot;David&amp;quot;})
create (_1 {`name`:&amp;quot;Emil&amp;quot;})
create (_2 {`name`:&amp;quot;Anders&amp;quot;})
create (_3 {`name`:&amp;quot;Bossman&amp;quot;})
create (_4 {`name`:&amp;quot;Ceasar&amp;quot;})
create _0-[:`KNOWS`]-&amp;gt;_2
create _2-[:`KNOWS`]-&amp;gt;_3
create _2-[:`BLOCKS`]-&amp;gt;_4
create _3-[:`KNOWS`]-&amp;gt;_1
create _3-[:`BLOCKS`]-&amp;gt;_0
create _4-[:`KNOWS`]-&amp;gt;_1
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;오늘의 주제는 WITH의 사용법이고, WITH 절을 어떻게 사용하는지 케이스 바이 케이스로 살펴보겠습니다. 먼저 WITH: Filter on aggregate function results에 대한 이야기입니다. 위와 같은 관계도가 있을 때, David에 연결된 사람 중 2명 이상 아는 사람을 찾아오고 싶습니다. 그럴땐 아래와 같은 코드를 사용하면 됩니다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;MATCH (david { name: &amp;quot;David&amp;quot; })--(otherPerson)--&amp;gt;()
WITH otherPerson, count(*) AS foaf
WHERE foaf &amp;gt; 1
RETURN otherPerson
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;라인 by 라인 설명하겠습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MATCH (david { name: "David" })--(otherPerson)--&amp;gt;()&lt;/strong&gt;: --는 -[]-와 동일합니다. 즉 어떤 edge든 상관없이 관계된 노드를 가르키게 됩니다. 그렇게 david 노드와 연결된 노드(여기선 otherPerson이라고 임의로 명명했습니다.)라면 모두 가져오고, otherPerson 노드에서는 --&amp;gt; 관계로 나가는 노드들을 가져오는 것이지요. 그림을 보시면 아시겠지만, otherPerson 노드는 Anders와 Bossman이 걸리고, 그 노드들로부터 --&amp;gt; 관계에 있는 노드까지는 아래와 같이 총 3가지 Path가 존재합니다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David--Anders--&amp;gt;Ceaser&lt;/li&gt;
&lt;li&gt;David--Anders--&amp;gt;Bossman&lt;/li&gt;
&lt;li&gt;David--Bossman--&amp;gt;David&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WITH otherPerson, count(*) AS foaf&lt;/strong&gt;: 오늘의 주제인 WITH 절 입니다. WITH 절로 otherPerson 노드를 가지고 놀 수 있습니다. 현재 우리는 1번 쿼리문을 통해 3개의 Path를 가지고 있습니다. 그렇기 때문에 otherPerson 포지션에도 3개의 노드가 들어오게 됩니다. 바로 Anders / Anders / Bossman. &lt;code&gt;MATCH (david { name: "David" })--(otherPerson)--&amp;gt;() RETURN otherPerson;&lt;/code&gt; 쿼리를 먼저 날려보세요. Anders가 한 개가 아닌 것을 볼 수 있습니다. 여기서 count(*)를 날리면, Cypher는 같은 노드를 기준으로 path수를 세게 됩니다. 결과적으로 Anders path 2개, Bossman path 1개를 찾게 되지요.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHERE foaf &amp;gt; 1 RETURN otherPerson&lt;/strong&gt;: 그렇게 찾은 path 개수가 1개보다 많은 otherPerson 노드를 리턴하라는 이야기입니다. 2개의 path를 가지고 있는 Anders가 되겠지요. 만약 &lt;code&gt;foaf = 1&lt;/code&gt;로 바꾸게 되면, Bossman 노드를 리턴하게 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;두번째, WITH: Sort results before using collect on them에 대한 이야기&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;MATCH (n)
WITH n
ORDER BY n.name DESC LIMIT 3
RETURN collect(n.name)
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MATCH (n)&lt;/strong&gt;: 어떤 노드든 쿼리의 대상입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WITH n&lt;/strong&gt;: 그 노드들을 가지고,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ORDER BY n.name DESC LIMIT 3&lt;/strong&gt;: 노드의 name을 기준으로 desc순 정렬하는데, 3개만 위에서 가져옵니다. (이때 주의할 점은 node 중 name 속성이 없는 녀석들이 가장 먼저 나온다는 점 입니다.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RETURN collect(n.name)&lt;/strong&gt;: 노드의 name을 묶어서 RETURN 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;세번째, WITH: Limit branching of your path search에 대한 이야기&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;MATCH (n { name: &amp;quot;Anders&amp;quot; })--(m)
WITH m
ORDER BY m.name DESC LIMIT 1
MATCH (m)--(o)
RETURN o.name
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MATCH (n { name: "Anders" })--(m)&lt;/strong&gt;: (Anders 노드) -- (아무 노드) path 들을 대상&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WITH m&lt;/strong&gt;: Anders노드와 연결된 노드 m을 가지고 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ORDER BY m.name DESC LIMIT 1&lt;/strong&gt;: 이름 가장 뒤에 있는 녀석&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MATCH (m)--(o)&lt;/strong&gt;: (그 녀석 노드) -- (아무 노드) path 들을 대상&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RETURN o.name&lt;/strong&gt;: 최종적으로, (Anders 노드)와 (연결된 노드) 중 (이름 가장 뒤에 있는 녀석)과 (-- 관계있는 녀석들)의 이름을 리턴.&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Tue, 31 Mar 2015 00:00:00 +0200</pubDate><guid>tag:,2015-03-31:neo4j-with.html</guid><category>Neo4j</category></item><item><title>Brief Introdunction of Neo4j</title><link>/brief-introdunction-of-neo4j.html</link><description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Graph database 
    일단 &lt;strong&gt;그래프 데이터베이스&lt;/strong&gt;는 말 그대로 &lt;strong&gt;그래프 자료구조&lt;/strong&gt;를 기반으로 한 데이터 베이스입니다. 그래프는 Node와 Edge로 이루어졌으며, Node는 대상이나 개체를, Edge는 Node들 간의 관계를 나타냅니다. 그래프 데이터 베이스로 가장 잘 알려진 것은 &lt;a href="neo4j.com"&gt;neo4j&lt;/a&gt;인데, 그 사용법에 대해 차근차근 알아가봅시다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting started
    일단 &lt;a href="http://neo4j.com/download/"&gt;neo4j를 다운&lt;/a&gt;받습니다. 그 다음 압축을 풀고, terminal에서 /bin/neo4j start를 실행합니다. 그리고 &lt;a href="http://localhost:7474"&gt;http://localhost:7474&lt;/a&gt;로 접속해봅시다. 뭔가 멋진 것들이 뜨는데, 이곳에 있는 console에 쿼리를 날려 DB를 생성/수정/검색할 수 있습니다. 쿼리는 Cypher라는 neo4j에서 전용 쿼리 langauge를 사용합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cypher language example
    &lt;img alt="relation" src="https://static.versal.com/restapi/assets/d582c924-34b2-42b3-b892-6e97b939489a" /&gt;&lt;/p&gt;
&lt;p&gt;아래는 Matrix 영화에 출연한 모든 배우들을 찾기 위한 쿼리입니다.&lt;/p&gt;
&lt;p&gt;```
MATCH (movie:Movie)&amp;lt;-[role:ACTED_IN]-(actor:Person)
WHERE movie.title="The Matrix"
RETURN role.roles, actor.name&lt;/p&gt;
&lt;p&gt;Label=&amp;gt; ':Person', ':Movie'
Relationship=&amp;gt; ':ACTED_IN'
Property=&amp;gt; '.title, '.role', '.name'
Identifier=&amp;gt; 'movie', 'role', 'actor'
Value=&amp;gt; 'The Matrix'
```&lt;/p&gt;
&lt;p&gt;모든 데이터를 지우기 위해서는 아래와 같은 쿼리를 날립니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MATCH (n)
OPTIONAL MATCH (n)-[r]-()
DELETE n,r&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;참고 사이트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.seenickcode.com/switching-from-mongodb-to-neo4j/#enterneo4j"&gt;Entering Neo4j story&lt;/a&gt;: Shindig이라는 음료수 공유 SNS를 만드는 스타트업인데, 처음엔 Postgres로 시작해서-&amp;gt;MongoDB/ElasticSearch-&amp;gt;Neo4j로 갈아탄 행적을 보여줍니다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/VeliovGroup/Meteor-Leaderboard-Neo4j"&gt;Meteor + Neo4j Leaderboard Example&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://addisonlee.azurewebsites.net/neo4j-vs-mysql-vs-mongodb/"&gt;MySQL vs MongoDB vs Neo4j&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Mon, 23 Mar 2015 00:00:00 +0100</pubDate><guid>tag:,2015-03-23:brief-introdunction-of-neo4j.html</guid><category>Neo4j</category></item><item><title>Purdue University with SW Maestro</title><link>/purdue-university-with-sw-maestro.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;- 현지 팀 프로젝트 (*필수)
- 기업 방문 (*필수)
- 기업가 정신 수업 (*필수)
- 2단계 프로젝트
- 퍼듀 인프라
- 소마 친구들
- 결심, 그냥 하자
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;소프트웨어 마에스트로 2단계 연수과정 중에 '해외 연수' 프로그램이 있다. 지난 기수(4기)까지는 실리콘벨리 기업방문이 주를 이루었다면(1주), 이번에는 한 대학에 정착하여 수업을 듣고 프로젝트를 진행하는 것에 중심을 두었다(4주). 개인적으로는 (실리콘 벨리를 안가보긴 했지만) 길게 이번 처럼 다녀오는게 더 나은 것 같다. 일단 프로그램만 두고 보면, 크게 (1) 현지 팀프로젝트와 (2) 기업 방문 (3) 기업가 정신 수업으로 나뉘어지고, 본인/팀 노력 여하에 따라 2단계 프로젝트를 지속적으로 진행하거나, 퍼듀 인프라를 적극적으로 활용하거나, 해외 대학원의 물꼬를 틀 수 있는 기회가 될 수도 있을 것이다.&lt;/p&gt;
&lt;p&gt;하나 하나 느낌들을 정리해보자. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;현지 팀 프로젝트&lt;/p&gt;
&lt;p&gt;일단 우리팀은 나,혜종,해찬 이렇게 3명이었고, 우리가 맡은 임무는 Emergency Mobile Energy Units이 었다. 간략하게 설명하자면, 어마무시하게 커다란 Trailer에서 에너지를 생산(태양에너지, 풍력에너지, 바이오에너지)하고, 긴급상황에서 바로 달려가 에너지를 공급해주는 프로젝트였다. 인디애나주에서 real estate 사업을 운영하고 있는 꿈꾸는 중년, Brandon이 기획한 아이디어였으며, 이번 프로그램에 참가한 우리(소프트웨어 팀)과 Ivy tech community college의 교수와 학생들(하드웨어 팀)이 한 팀을 이루었다.&lt;/p&gt;
&lt;p&gt;주 1회 미팅을 가졌으며, Ivy tech에 가서 직접 하드웨어를 보고 설명을 듣기도 하였다. 그 하드웨어를 managing할 수 있는 통합 소프트웨어를 만드는 것이 우리(소프트웨어 팀)의 목표였지만, 현실적으로 트레일러를 만들만한 돈과 시간이 부족하여, 우리는 들은 설명을 토대로 dummy 데이터와 함께 소프트웨어 &lt;a href="http://tehranslippers.com:8080"&gt;프로토타입&lt;/a&gt;을 만들었다. 긴급상황에 EMA(Emergency Management Agencies)가 사용하기 편리하도록 여러 대의 트레일러의 정보를 한 페이지로 볼 수 있는 Clustered Mornitoring System을 만들었으며, Brandon은 우리의 프로토타입을 꽤나 좋아하였다! (정확히 자신이 원했던 것이라며! 헤헤)&lt;/p&gt;
&lt;p&gt;우리 프로젝트에 대한 다른 자세한 내용은 &lt;a href=""&gt;ppt&lt;/a&gt;로 대체하며, 무엇보다 현지 팀 프로젝트를 진행하며 느꼈던 점들을 적어보고자 한다. 무엇보다 좋았던 점은 미국 현지에서 어떤 프로젝트들이 진행되고, &lt;strong&gt;어떤 방식으로&lt;/strong&gt; 진행되는지 바라보았던 점이다. 사실 이 점은, 우리 팀보다는 학교 내부 연구실에서 진행했던 몇 팀들이 더 잘 알 것이다. 우리는 실제 학교 밖의 사람들과 프로젝트를 진행하느라고, 자주 만나지 못하고 그만큼 피드백도 충분하지 못했다. 허나, 학교에서 프로젝트를 진행했던 팀들을 옆에서 지켜보니, 학교 내에 있어 접근성이 쉬운만큼 미팅도 자주하고, 그만큼 요구사항과 피드백 등도 굉장히 빠른 것 같았다. 그리고 기회를 잡으려면 얼마든지 기회를 잡아, 해당 연구실로 해외 대학원을 꿈 꿀 수도 있어보였다. (두성이네 팀은 연구실 박사들과 교수가 너네 정말 잘한다며, 대학원 생각있으면 돈 걱정말고 지원하라고 했다더라 캬!) 그런면에서 우리팀은 아쉬운 점이 있었지만, 그래도 뭐 나름 유쾌하고 좋은 사람 만난 것 같아서 괜찮다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기업 방문&lt;/p&gt;
&lt;p&gt;퍼듀 대학교는 인디애나 주에 4군데의 Research Park가 존재한다. Research Park에는 많은 기업/연구 활동이 진행중이며, 지역사회(인디애나주)의 고용창출이나 경제발전등에도 큰 도움이 된다고 한다. (미국 사람들은 자신들의 지역 공동체 의식이 뚜렷한것 같아 굉장히 부러웠다.) 프로그램 중에 기업 방문이 3-4 군데 정도 있었는데, 나와 성필이는 Research Park에 있는 Spensa Technology에서 인턴 면접을 볼 수 있는 기회도 가졌다. Spensa Technology는 한국인 재미교포 교수님(Johnny Park)이 대표로 계신 기업인데, Argriculture에서의 큰 기회를 보고 있었다. 일단 그 첫 번째 출발은 Z-Trap, 농작물에 해로운 해충을 잡아주는 임베디드 장비였다. 미국 농작물 40%가 해충으로 인해 피해를 보고 있는데, 그러한 정말 문제다운 문제를 풀려고 하는 모습이 아름답고 가치있어 보였다. 여하간 그런 모습이 멋있어 강연 끝나고 가서 인사드리면서 '인턴은 혹시 안뽑으시나요 굽신굽신'하고, 학교 특강같은것도 한번 오셔서 다시 한번 굽신굽신 했더니 관심을 보여주셨다. 링크드인으로 먼저 연락이 오셔서, 그렇게 면접을 보게 되었는데 정말 좋은 경험이었다. 현재 이 글을 쓰고 있는(인천행 비행기) 시점에선 연락이 없으신데, 느낌은 나쁘지 않다. 만약 이번 붙으면, 기술 면접이 남아있는데 붙던 떨어지던 굉장히 좋은 경험으로 남을 것이다!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기업가 정신 수업&lt;/p&gt;
&lt;p&gt;사실 별로 마음에 안 들었다. 워낙 이런 수업에 관심이 없는지라, 내 마음이 꽉 막혀서 그랬을 수도 있겠지만, 한국에서 다 들었던 내용들 영어로 한 번 더 듣는 기분이었다. 배운게 딱 한가지 있다면, &lt;strong&gt;비즈니스를 한다면, 무조건 고객&lt;/strong&gt;이라는 것이다. 나는 비즈니스도 무조건 문제 중심이라고 생각하고 있었는데, 사실 생각해보니, 고객(사람)이 없으면 문제도 없다. 근본적인 것은 사람에 있었다. 결국 비즈니스를 하기 위해선, 사람들 호주머니에서 돈을 꺼낼 수 있어야하므로, 문제 중심보단, 사람 중심이 맞는 것 같다. 자, 사실 수업 내용보다도, 교수의 수업 방식(질문을 유도하고, 질문을 던지는)이 너무 마음에 들었던 것 같다. 그래서 해외로 빨리 나오고 싶어졌다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2단계 프로젝트&lt;/p&gt;
&lt;p&gt;위의 3개는 프로그램 일정 중 필수이다. 보고서도 작성해야하고, 발표도 해야한다. 수업 출석 이외에 평가에 들어가진 않는 것 같지만.. 여하간, 팀의 재량에 따라 소마 2단계 프로젝트도 진행 할 수 있었다. 우리의 경우, 하... 모르겠다. 사실 다들 정말 열심히 하는 친구들이고, 열심히 한다고 했는데, 결과만 봐선 별로다. (일단 내가 맡은 임무에 한하여..) 크롤링은 한 달전과 똑같이 여전히 돌아가고 있으며, 데이터 베이스 쿼리문도 썩 마음에 들지 않는다. 팀원들에 비해 많은 기여가 없었떤 것 같아 부끄러울 따름이며, 한국 돌아가서 정신 다 잡고, 컴퓨터 공부에 매진해야 겠다는 결심을 하였다. 앞으로 남은 3개월가량 무엇을 해야할지 여전히 고민이 된다. 새로운 프로젝트를 기획할 것이냐, 아니면 모바일 앱 서치 엔진으로 나갈 것이냐. &lt;strong&gt;중요한 것을 생각해야 할 것 같다.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;퍼듀 인프라&lt;/p&gt;
&lt;p&gt;일단 겨울 퍼듀는 정말 춥다. 살이 찢어질 것 같은 칼바람이 불때면, 정말 아리다. 그리고 학교 주변에 놀거리가 많지 않다. 현지 학생들 이야기를 들어보면, 전반적으로 '심심하다'는 표현을 많이 쓴다. 그거 2개만 빼면, 퍼듀라는 학교는 참 좋은 학교 인 것 같다. 농담삼아 미국 부모들이 가장 아이들을 보내고 싶어하는 학교가 퍼듀란다. 놀거 없고 공부만 할 것 같다고. &lt;/p&gt;
&lt;p&gt;일단 내가 정말 마음에 들었던 몇가지 인프라만 말해보겠다. 첫번째는 코렉(코도바 레크레이션 센터인데, 거대한 운동시설이라고 보면된다)이다. 소마에서 코렉 카드도 나눠주어, 많이 다녔는데(초기 결심에 비해선 많이 못갔지만), 시설도 정말 좋고 학생들도 운동을 정말 열심히해서 부러웠다. Work-Life Balance라고 해야하나, Study-Life Balance라고 해야하나. 아무튼 운동도 공부도 열심히 하는 것 같아보였다. 나는 창연이, 성필이와 함께 배드민턴 동아리도 들었는데, 괜찮은 선택이었던 것 같다. 그리고 중국인들이 많다는 것을 새삼 느꼈다.&lt;/p&gt;
&lt;p&gt;두번째는 글쓰기 센터(OWL). 이건 맨날 간다 간다 하다가 귀국 2일 전에 다녀왔는데, 괜찮은 시스템이다. 예약만 해두면, 원하는 시간에 가서 어떤 종류의 글쓰기던 첨삭을 해준다.(30분동안) 나같은 경우는 미국에 와서 Resume 완성해가는게 목표였는데, 완성은 못했지만 draft가지고 가서 많이 배워왔다. 일단 Resume는 1장으로 Condense하게 줄여야하고, 첫 줄에는 Objective로 나의 구직 목표를 서술하여둔다. 일단 가고 싶은 회사가 명확할 수록 좋을 것 같다는 생각이 들었다. 그리고 내가 했던 프로젝트나 경험들도 회사에서 &lt;strong&gt;혹 할만한&lt;/strong&gt; 것들에 집중하여 쓰는 것이 중요하다는 것도 깨달았다. 구직을 위해선 욕심을 버려야한다.&lt;/p&gt;
&lt;p&gt;세번째는 도서관 자료. 사실 이건 내가 그다지 활용하진 못했는데 &lt;a href="https://www.lib.purdue.edu/libraries/mgmt"&gt;도서관 홈페이지&lt;/a&gt;에 들어가면 무궁무진한 (비싼) 자료들이 즐비하고 있다. 퍼듀 Wifi내에서만 접근가능한 것 같은데, 성필이 말에 의하면 구글에선 찾을 수 없는 몇백불짜리 자료들이란다. &lt;/p&gt;
&lt;p&gt;그리고 마지막으로, 그 넓은 학교 부지 어느 빌딩을 가던 학생들을 위한 공간(공부던 휴식이던)이 충분하게 있다는 것이 너무 마음에 들었다!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소마 친구들&lt;/p&gt;
&lt;p&gt;사실 센터에서 지낼 땐, 팀원 이 외 친구들과 특별히 얘기나눌 기회가 많지 않았다. 그래서 사실 친구들마다 뭘 좋아하고, 뭘 하던 친구들인지 잘 몰랐다. 미국와서 얻어가는 것 중 하나도 소마 친구들의 성향에 대해 잘 알고, 조금 더 가까워져가는 것이다. 물론 아직도 친해지지 못한 친구들도 있지만, 이제 센터가면 어색하지 않게 지낼만큼은 된 것 같다. 그리고 이 친구들이 얼마나 대단한 친구들인지도 깨달았다. 사실 나는 이 단체에 속하게 된 정말 운이 좋은 케이스인 것 같고, 전국에서 모인 소프트웨어 인재들인데 얼마나 한 자리씩 하고 있던 친구들일까! 미국에서도 많이 배웠지만, 친구들을 통해서도 많이 배웠다. 이곳에 있다는 것이 뿌듯하고 감사했다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;결심, 그냥 하자&lt;/p&gt;
&lt;p&gt;내가 이곳에 와서 얼마나 우물안 개구리처럼 좁은 세상에 살았는지 알게 되었다. 그리고 나란 사람이 실력뿐만아니라, 인격적으로도 얼마나 수양할 것이 많은지도 깨달았다. 또한 이곳에선 실력이 있으면 언제나 기회가 열려있다는 것도! 사실 나는 어디든 잘 싸돌아다니고, 잘 물어보기 때문에 (나만 준비되어 있다면) 기회를 잡는데는 정말 자신이 있다. 그래서 나는 이곳에 와서 확실한 목표를 하나 정했다. &lt;strong&gt;"실력을 키워, 내년 2016년엔 무슨 일이 있어도 해외로 나온다."&lt;/strong&gt; 그게 사실 대학원이 되었든, 해외 인턴/취업이 되었든 상관없다.(물론 여행은 아니고..) 한 살이라도 어렸을때 낯선 환경에 도전하고 싶다. 나도 언제까지 내가 도전적일 수 있을지 모르겠다. 그렇지만 지금은 젊으니까 확실히 도전적인 자세를 취할 수 있다. 지켜봐주기 바란다. 옆에서 내가 내 목표를 잊은 것 같이 행동한다면, 대놓고 욕해도 좋다. 아니, 대놓고 욕해야 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Sat, 21 Feb 2015 00:00:00 +0100</pubDate><guid>tag:,2015-02-21:purdue-university-with-sw-maestro.html</guid><category>USA</category></item><item><title>[Project] Mobile App Search Engine by Using Deeplink</title><link>/project-mobile-app-search-engine-by-using-deeplink.html</link><description>&lt;p&gt;2015년 1월부터 시작하게 된 &lt;strong&gt;모바일 앱 검색엔진&lt;/strong&gt;. 현재 검색엔진들이 웹에서 모든 정보를 긁어오고 있는 반면, 모바일 어플리케이션 내부 정보들은 긁어오지 못하고 있다. 모바일에서 생산되는 정보의 양이 점점 늘어남에 따라 검색엔진들은 위기를 느끼기 시작하였고, 이에 국내 검색엔진들은 어플리케이션사의 데이터베이스를 직접 요청하기에 이르렀다.(아마 구글이나 중국의 바이두도 다르지 않을 것이라 본다.) 하지만 어플리케이션사는 현재 정보가 웹 중심인 검색엔진에서 본인들의 어플리케이션이 얼마나 검색 결과의 상단에 노출될지 의심스러워, 함부로 &lt;strong&gt;자신들의 값 비싼 자산인 데이터베이스&lt;/strong&gt;를 넘기지 않는다. &lt;/p&gt;
&lt;p&gt;하지만 분명 기회는 있다. &lt;strong&gt;어플리케이션사&lt;/strong&gt;는 본인들의 어플리케이션을 자연스럽게 홍보할만한 적절한 플랫폼이 필요하며, &lt;strong&gt;검색엔진&lt;/strong&gt;은 이에 따른 트래픽을 언제나 필요로하며, &lt;strong&gt;사용자들&lt;/strong&gt;은 어플리케이션을 굳이 다운받지 않고도 어떤 어플리케이션인지 알고 싶어한다.(현재 앱스토어나 마켓에서 제공되는 스크린샷과 설명들은 정보가 너무 부족하다! 앱 받았다가 지운 것이 한 두번인가!)&lt;/p&gt;
&lt;p&gt;언제나 문제는 고객(사람)으로부터 발생한다. 우리가 하고자 하는 일은 사용자가 &lt;strong&gt;모바일에서 앱 내 정보를 검색할 수 있게하고, 딥 링크를 통해 어플리케이션의 특정 페이지로 꽂아주는 일이다.&lt;/strong&gt; 자 그러면 우리가 개발해야할 스코프가 나온다. 일단 기획의 범위는 우리가 데이터베이스를 요구하지 않아도 정보를 가져올 수 있는 &lt;strong&gt;음악&lt;/strong&gt;로 한정짓는다. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Step One: 우리는 어플리케이션에게 데이터베이스를 요구할만한 짬밥이 되지 않는다. 우리가 가진 정보를 최대한 활용하여 응용프로그램이 어떻게 동작할 수 있는지 보여주는 수밖에 없다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;'음악 정보' 데이터베이스가 변경되면, 항상 크롤링해야할 사이트들에서 크롤링을 한다.&lt;/li&gt;
&lt;li&gt;특정 '어플리케이션'에도 특정 '음악 정보'가 있으면, '연결 정보' 테이블에 '음악 정보의 Song ID'와 '어플리케이션의 Track ID'를 밀어넣고, 자동으로 Elastic search에 인덱싱해둔다.&lt;/li&gt;
&lt;li&gt;자 그러면 이제, 사용자가 우리의 검색 엔진에서 검색어를 넣었을 때, Elastic search에 가서 음악 정보에 대한 Song ID를 받아오고, Song ID를 가지고 '연결 정보' 테이블로 가서 그 노래를 가지고 있는 어플리케이션의 링크를 가져오면 끝이다!&lt;/li&gt;
&lt;li&gt;'음악 정보' 데이터베이스 항상 최신화. 이게 조금 성가신게 음악은 계속해서 추가된다. 현재로써 우리에게 최신 음악 데이터베이스 밀어 넣어줄만한 곳이 없으니, 알아서 찾아와야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step Two: 어느 정도 완성한 프로토타입을 가지고, 어플리케이션사의 데이터베이스를 요구하고 계속해서 서비스를 발전시켜나간다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우리의 프로토타입은 (적어도 내가 볼땐) 네이버나 구글, 다음에서 탐낼만한 서비스이다. 헌데 아직은 눈치만 있다면 누구나 할 수 있는 작업들이다.&lt;/li&gt;
&lt;li&gt;경쟁력을 위해 딥 링크를 구현하고 있는 서비스를 빠르게 알아내고, (예를 들어, &lt;strong&gt;크롬 익스텐션&lt;/strong&gt;으로 Play 버튼이나 어떤 액션에 대하여 리턴되는 링크 바로 받아오기.)&lt;/li&gt;
&lt;li&gt;딥 링크를 구현하고 있지 않는 서비스들에게 딥 링크를 쉽게 구현할 수 있는 API를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;궁금한 점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어플리케이션사는 사용자 경험을 처음 랜딩 페이지부터 디자인하게 된다. 과연 딥링크는 유용할 수 있을 것인가?&lt;/li&gt;
&lt;li&gt;차라리 애플이나 구글에서 움직이는 것이 가장 좋은 방법아닌가? 왜 구글은 효율적으로 움직이지 않고 있는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Sun, 15 Feb 2015 00:00:00 +0100</pubDate><guid>tag:,2015-02-15:project-mobile-app-search-engine-by-using-deeplink.html</guid><category>Deeplink</category><category>search engine</category></item><item><title>[Project] Pipelife</title><link>/project-pipelife.html</link><description>&lt;p&gt;준석이형과 파이프라이프(Pipelife) 프로젝트를 진행했다. (사실 프로젝트라고 하기엔 굉장히 짧은 작업 시간이긴 하지만..) 파이프라이프 프로젝트는 준석이형이 파이프를 가지고 만든 구조물에 내가 Raspberry Pi와 Arduino등의 보드를 넣어 인터렉션 효과를 주는 식으로 진행되었다. 간단하게 설명하면, 구조물1(스피커, output)과 구조물2(습도센서, input)가 있어서, 구조물2가 센싱하는 습도에 따라서, 구조물1에서 흘러나오는 음악의 분위기가 달라지는 컨셉이다. (예를 들어 비가와서 습도가 높은 날엔, 비오는 날 어울리는 노래 재생)&lt;/p&gt;
&lt;p&gt;구조물1(스피커, output)에는 라즈베리파이 B+와 스피커, 블루투스 모듈이 들어가며, 
구조물2(습도센서, input)에는 아두이노 Leonardo와 습도모듈, 블루투스 모듈이 들어간다.
둘은 블루투스 모듈을 통해 통신한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="title" src="./theme/images/pipelife/pipe1.jpg" /&gt;
(스피커가 달려있는 구조물1, 드럼치는 모습을 하고 있다.)
&lt;br/&gt;
&lt;img alt="title" src="./theme/images/pipelife/pipe3.jpg" /&gt;
(구조물 2에 들어갈 아두이노 Leonardo와 습도센서)
&lt;br/&gt;
&lt;img alt="title" src="./theme/images/pipelife/pipe2.jpg" /&gt;
(은색 가방(?)에 아두이노를 탑재한 구조물 2)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 +0100</pubDate><guid>tag:,2014-12-11:project-pipelife.html</guid><category>Learn by doing</category></item><item><title>[edX] Review of 6.002x</title><link>/edx-review-of-6002x.html</link><description>&lt;p&gt;예전부터 컴퓨터 안에 회로들은 어떻게 동작하는지 참 궁금했다. 컴퓨터 복수전공을 시작하고, 아키텍쳐나 디지털 회로같은 것들을 배우면서 갈증이 조금 해소되긴 했으나, 컴과 과목에선 제일 낮은 레벨이 0과1로 추상화되는 그 레벨까지여서 여전히 궁금한 부분들이 남아있었다. 도대체 회로 중 무엇이 0과 1를 구분지을 수 있단 말인가! amp는 어떤 방식으로 신호를 증폭시키는가! 뭐 그런것들.. 여하간 그러한 연유로 전자공학 수업을 한번즈음 들어보고 싶었는데, 학기중엔 컴퓨터 수업들도 따라가기가 도저히  바빠 엄두를 못냈었다. 그런데 이번 가을학기에 휴학도 하는데, 때마침 8월 말 edx.org에서 개강하는 6.002x Electonics and Circuits 강의(MIT eecs 2학년 강의란다.)가 있어, 수강 신청하고 이를 듣게 되었다.&lt;/p&gt;
&lt;p&gt;수업은 12월 15일 (나는 못 친..)기말고사를 마지막으로 종강이 되었는데, 결론부터 이야기하자면 수업은 매우 좋았는데, 끝까지 열심히 못한 것 같아 아쉬움이 많이 남는다. 처음에 강의도 너무 좋고, 이런 플랫폼을 만들어준데에 감사해서 $100 기부도 했었다!(인터넷을 통해 교육 기회 균등을 실현하자의 비전을 가진 edx는 이런식으로 수익창출을 하려는 것 같았다) 기부를 하면 Verification Code라고, '이 친구는 성실하게 수업에 임했고, 성적은 이 정도다'는 것을 증명해주는 일종의 증명서를 발급해주는데, =.=; 마지막에 너무 못 들었다. 기말고사도 내팽겨치고, 중국엘 다녀왔으니..ㅠ.ㅠ 아무튼 나는 아래 보는 것처럼 100% 중 38% 정도의 숙제와 시험 성적을 받았다. 진심 부끄..(좀만 참구 final 볼 걸!)
&lt;br/&gt;&lt;br/&gt;
&lt;div style="text-align:center"&gt;
&lt;img src="./theme/images/grade.png" alt="edx" style="width:720px;"&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;br/&gt;
자, 그래도 수업을 들으면서 많은 궁금증(위에서 언급한 트랜지스터와 앰프의 원리)이 해소되었고, 전자공학이 내 길은 아니다라는 확신을 가져다 준 것만으로도 이번 수강의 목표는 어느정도 달성한 것 같다. 나는 인터넷의 혜택을 정말 많이 본 사람이다. 대학들어올때도 인강듣고, 게시판에 질문하고, 찾아가면서 공부 많이했고, 인터넷을 통한 창업도 도전했었고, 심지어 여자친구도 인터넷의 도움을 받아=_=; 만났으니 말이다. edX와 Coursera, kahn academy 등, 앞으로 이들로 인해 우리나라 교육계에도 혁명의 바람이 불어올 것이다. 시간이 지날수록 참여하는 대학들이 늘어나고 있고, 그에 따른 강의 컨텐츠 또한 폭발적으로 늘어나고 있다. 수 년내에 적응하는 자와 적응하지 못하는자 사이 정보의 빈부 격차가 또 한 차례 크게 벌어질 것이다. &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;div style="text-align:center"&gt;
&lt;img src="./theme/images/ReceiptOrderedX.png" alt="edx" style="width:720px;"&gt;
&lt;/div&gt;
(아..아까..깝지 않아..)&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0과 1을 구분지어주는 것은 바로, MOFSET
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MOFSET은 Metal-Oxide Semiconductor Field-Effect &lt;strong&gt;Transistor&lt;/strong&gt;의 short term이다. 그러면 트랜지스터가 무엇인지부터 알아보는 것이 순서이겠지?&lt;/p&gt;
&lt;p&gt;우선 &lt;a href="http://ko.wikipedia.org/wiki/%ED%8A%B8%EB%9E%9C%EC%A7%80%EC%8A%A4%ED%84%B0"&gt;트랜지스터&lt;/a&gt;는 증폭 작용과 스위칭 역할을 하는 반도체 소자이다. 1948년 벨 연구소에서 개발되었고, 변화하는 저항을 통한 신호 변화기라는 뜻(transfer of a signal through a varister / transit resistor)에서 이름을 땄다고 한다. &lt;/p&gt;
&lt;p&gt;트랜지스터 개발이후, 더 작고 값싼 전자기기들을 폭발적으로 생산할 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Transistors-white.jpg/1600px-Transistors-white.jpg" title="=300x" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Fri, 05 Dec 2014 00:00:00 +0100</pubDate><guid>tag:,2014-12-05:edx-review-of-6002x.html</guid><category>edX</category></item><item><title>[Project] Smart Blocks</title><link>/project-smart-blocks.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&amp;#39;스마트 블록&amp;#39;은 Software maestro(NIPA 주관) 5기 연수 과정의 첫 번째 프로젝트입니다. 유명환 멘토의 지도하에 4명이 팀(팀명 레전드5)을 이뤄 프로젝트를 진행했으며, 진행 기간은 3개월입니다. 이 아이디어는 사업을 하고자 하는 의뢰자에 의해 기획되었으며, (거의) 그 기획 의도대로 만들어졌습니다.
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;아이들이 놀이를 통해 자연스럽게 영어 문장을 학습할 수 있는 스마트 블록&lt;/h4&gt;
&lt;p&gt;스마트 블록은 놀이와 학습을 접목시킨 제품이다. 학습 만화가 놀이와 학습을 접목시킨 대표적인 예인데, 재미있는 학습 만화를 본 적이 있다면 그 기억이 인생에서 상당히 오랜 기간 지속되는 것을 경험해 본적이 있을 것이다. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;스마트 블록은 크게 단어 블록(Data block)과 채점 블록(Control block)으로 나누어진다. &lt;/p&gt;
&lt;p&gt;(1) 블록별로 각각 다른 단어가 적혀있는 &lt;strong&gt;단어 블록&lt;/strong&gt;
&lt;img alt="title" src="./theme/images/sblock/wordblock.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(2) 문장이 만들어지면 마지막으로 붙이는 &lt;strong&gt;채점 블록&lt;/strong&gt;
&lt;img alt="title" src="./theme/images/sblock/controlblock.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;단어 블록에는 영어 단어들이 적혀있고, 아이들은 블록 양 옆과 위 아래 붙어있는 자석들을 이용해, 블록들을 손쉽게 떼어냈다 붙였다하며 영어 문장을 학습할 수 있다. 아이가 단어 블록들을 이용해 문장을 만들고 채점 블록에 붙이면, 채점 블록은 그 문장이 맞았는지 채점해준다. &lt;/p&gt;
&lt;p&gt;&lt;img alt="title" src="./theme/images/sblock/blocks.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;작동원리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;블록 간 통신은 모두 Tx, Rx 핀을 통한 UART 통신으로 이루어진다. 채점 블록은 단어 블록이 붙어있든 계속해서 신호('거기 누구 붙어있나요~?')를 보낸다. 단어 블록이 안 붙어있다면 계속 보내는거고, 붙어있으면 단어 블록(채점 블록과 붙어있는)으로 부터 응답('있어요! 잠시만요~')을 받게 된다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신호를 받은 단어 블록은 응답을 해준 뒤, 마지막 블록에 도달할때까지 같은 신호('거기 누구 붙어있나요~?')를 전달한다. 마지막 블록 역시 신호('거기 누구 붙어있나요~?')를 전달하지만, 응답을 받지 못한다. 응답을 받지 못했기때문에, 자신을 마지막 블록이라고 간주하고 자신의 ID를 큐(Queue)에 담아 채점 블록 쪽으로 전달한다. 기다리고 있는 단어 블록들 역시 자신의 ID를 추가로 큐(Queue)에 담아 채점 블록 쪽 으로 전달한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;채점 블록은 단어 블록들의 ID가 들어있는 큐(Queue)를 받았고, ID에 해당하는 단어가 무엇인지 미리 저장해둔 Table(ID-Word matching table)에서 찾아온다. 단어들을 찾아와 큐(Queue)에서 꺼낸 순서대로 문장을 만든다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만들어진 문장은 link-grammer(grammer check open source developed by CMU)라는 오픈 소스를 통해, 맞는 문장인지 아닌지 채점되고 그 결과를 소리와 화면을 통해 알려준다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발과정&lt;/p&gt;
&lt;p&gt;처음에 다른 프로젝트도 할 수 있었지만, 이 프로젝트를 선택했던 이유는 여러 가지 상황을 종합적(자금, 멘토의 시간 활용, 하드웨어 전문가 투입, 난이도 등)으로 판단했을때 가장 현실적이었고, 무엇보다 (사업 의지를 가지고 계신 분의 의뢰에 의해 만들기에) 빵판에서부터 실제 시장에 나갈 제품이 어떻게 탄생하는지 경험해 볼 수 있을거라 생각했기 때문이다.&lt;/p&gt;
&lt;p&gt;(1) 빵판부터...
&lt;img alt="title" src="./theme/images/sblock/dev.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(2) 1차 목업
&lt;img alt="title" src="./theme/images/sblock/mup1_1.jpg" /&gt;
&lt;img alt="title" src="./theme/images/sblock/mup1.jpg" /&gt;
&lt;img alt="title" src="./theme/images/sblock/mup1_2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(3) 2차 목업
&lt;img alt="title" src="./theme/images/sblock/mup2.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개선 방향 및 확장가능성&lt;/p&gt;
&lt;p&gt;(1) 앱&lt;/p&gt;
&lt;p&gt;지금도 앱이 있긴하다! 현재 동작하는 기능은 (1)통계와 (2)RC 조정이다. 통계 버튼을 누르면 채점 블록과 블루투스 페어링되어, 채점 블록이 현재까지 채점한 학습 데이터를 앱으로 가져오게된다. 그리고 맞은 개수가 일정 수준 이상이면 아이에게 보상으로 RC카 조정을 하게 해준다. 딱 여기까지다. 사실 지금의 수준은 개인적으로는 굉장히 아쉬운 부분이다. 프로젝트 기간이 더 길고, 의뢰자와 이야기가 된다면 바꾸고 싶은 부분이 많이 남아있다. 아이가 문장을 만드는데 어떤 부분에서 어려움을 느끼는지, 그리고 서버에 그 데이터들을 모아 나이대별로 어떤 문장을 구사하는지 등이다. &lt;/p&gt;
&lt;p&gt;&lt;img alt="title" src="./theme/images/sblock/app.png" /&gt;&lt;/p&gt;
&lt;p&gt;(2) 다른 아이디어로의 확장&lt;/p&gt;
&lt;p&gt;사실 개인적으로 이 프로젝트를 했던 또 다른 이유를 찾으라면, 써먹는 기술 구조를 가지고 다른 아이디어로의 확장이 가능해보였기 때문이다. 물론 의뢰자 사업 분야(교육용 완구)는 아니다. 그냥 많은 IoT 제품들이 이러한(아래 그림과 같은) 추상화 구조를 가진다. 
&lt;img alt="title" src="./theme/images/sblock/clones.png" /&gt;&lt;/p&gt;
&lt;p&gt;스마트 폰이 보급화되면서, 스마트 폰 주변기기도 확장되고 있다. 스마트 폰의 주변기기는 스마트 폰이 만족시키지 못하는 감각을 확장시켜주는 역할(&lt;a href="http://verticalplatform.kr/archives/2010"&gt;비콘&lt;/a&gt;은 결국 스마트폰의 촉각을 더 확장시켜주는 셈)을 한다. 그림에서 clones들은 그 감각을 확장시켜주는 세포들이고, control tower는 clones들과 스마트 폰 사이를 연결시켜주는 통로(원거리 통신 담당), 그리고 서버는 사용자들의 스마트 폰에서 받아온 데이터를 받아서 분석하는 곳이 된다. 이번 프로젝트로 인해, 어느 정도 간략한 그림은 잡을 수 있게 된 것 같아 다행이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0100</pubDate><guid>tag:,2014-11-03:project-smart-blocks.html</guid><category>Learn by doing</category></item><item><title>[Project] How to play multiple videos completely at once?</title><link>/project-how-to-play-multiple-videos-completely-at-once.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;  이 글은 &amp;quot;하나의 데스크탑 + 여러개(5개)의 모니터 + 각 모니터에서 여러개의 동영상을 완전 동시에 Play&amp;quot;하는 방법에 대한 글이다. 보통 매장 전시나 미디어 아트같은 것에서 많이 보았을 것이다.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="title" src="https://www.dropbox.com/sh/5iyud8vsxyvyaen/AACo18rvHIVKpUraZTN9xCiQa/display.jpg?raw=1&amp;amp;dl=0" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
1. (&lt;strong&gt;Hardware&lt;/strong&gt;) 우선 모니터 5대를 한대의 컴퓨터에 연결하기 위해선 그래픽 카드가 지원을 해줘야한다. 그래서 &lt;a href="http://danawa.com"&gt;다나와&lt;/a&gt;같은데 가서 그래픽 카드를 찾아보면 '최대 지원 모니터수'라고 나오는데, 3~4개가 보통이다. 6개짜리(eyefinity)도 있긴한데, 단종되서 한국에선 판매하는 곳이 없다고 한다. 다른 방법을 찾아야한다. 찾아보니 Matrox사에서 나온 &lt;strong&gt;TripleHead2Go, DualHead2Go&lt;/strong&gt; 제품이 있다. 얼핏보면 평범한 모니터 분배기(모니터 분배기는 같은 화면을 1:n으로 '복제'만 가능하다.)처럼 생겼지만, 이 제품은 모니터를 '확장'시켜주는 역할을 한다. 최대 모니터 수를 늘려주는 역할을 하는 것이다. 그렇게 최대 모니터 수가 4개인 그래픽카드에 DualHead2Go를 사용하면 최대 5개, TripleHead2Go를 사용하면 최대 6개까지 사용가능하다. 그렇게 난 최대 모니터 수 4개를 지원하는 그래픽 카드와 DualHead2Go를 준비했다. (DualHead2Go를 사용하려면, 데스크탑에 DisplayPort와 USB전원을 연결하고, 드라이버를 설치해야한다. 드라이버는 Matrox사 홈페이지에서 제공하고 있다.)
&lt;br/&gt;&lt;br/&gt;
2. (&lt;strong&gt;Software&lt;/strong&gt;) 소프트웨어 최초 시도는 &lt;a href="http://processing.org"&gt;Processing&lt;/a&gt;이었지만 결과는 싱크도 안맞고 너무 버벅거렸다. 지인들에게 조언을 구했을 때 추천해준 방법들은 OpenCV ffmpeg, OpenFrameworks, Cinder, vvvv 등이 있었는데, 내가 툴을 다뤄본적이 없어서 시간이 얼마나 걸릴지 알 수 없었다. 더 간단한 방법이 있을것같아서 좀 찾아봤다. 좀 찾아본거 치곤 삽질이 길었지만, 삽질의 결과 내가 찾은 방법은 바로 &lt;a href="http://www.avisynth.nl/"&gt;&lt;strong&gt;AviSynth&lt;/strong&gt;&lt;/a&gt;다.
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p style="text-align:center;"&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/gmVq95vOHRg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.avisynth.nl/"&gt;&lt;strong&gt;AviSynth&lt;/strong&gt;&lt;/a&gt;를 이용해, 서로 다른 영상을 하나의 영상으로 쉽게 합칠 수 있다. 일단 링크들어가서 다운받고 설치를 하면, 파일명.avs 파일을 인터프맅할 수 있다. AviSynth에서 지원해주는 몇가지 플레이어가 있는데, &lt;a href="http://gom2.gomtv.com/release/gom_player.htm"&gt;곰 플레이어&lt;/a&gt;도 그 중 하나다! 파일명.avs는 정말 단 몇 줄의 코드면 된다.
&lt;br/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;clip1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DirectShowSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a1.avi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clip2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DirectShowSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a2.avi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clip3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DirectShowSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a3.avi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clip4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DirectShowSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a4.avi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clip5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DirectShowSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a5.avi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;StackHorizontal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clip1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;clip2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;clip3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;clip4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;clip5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다 만들었으면 플레이어를 실행시키고, .avs파일을 끌어다 놓자(Drag and Drop)! 그러면 다섯개의 영상이 동시에 실행될 것이다. 주의해야할 점은 영상의 height가 모두 같아야 한다는 점이다. 재생시간은 달라도 되는데, 먼저 끝난 영상은 검은화면으로 다른 영상이 끝날때까지 기다린다. 참고로 곰 플레이어의 &lt;a href="http://gom.gomtv.com/main/index.html?ch=board&amp;amp;pt=v&amp;amp;order=&amp;amp;pnum=1&amp;amp;menu=skin&amp;amp;subMenu=&amp;amp;category=14&amp;amp;sWord=&amp;amp;sValue=&amp;amp;masterid=328370"&gt;제로스킨&lt;/a&gt;을 사용하면 전체화면할 때 군더더기가 없어서 좋다!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Sun, 12 Oct 2014 00:00:00 +0200</pubDate><guid>tag:,2014-10-12:project-how-to-play-multiple-videos-completely-at-once.html</guid><category>Learn by doing</category></item><item><title>[AVR] UART</title><link>/avr-uart.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;오늘은 UART에 대해 공부해보고자 한다. 8bit processor 통신이야기를 하다 보면, 항상 나오는 이야기들이 Serial 통신, UART, USART, I2C=TWI, SPI 등등 인데, 이들간 관계를 알아보고, UART가 무엇인지 자세하게 알아보자.
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;데이터 통신은 크게 직렬통신과 병렬통신으로 나눌 수 있다. 상식적으로 병렬 통신이 여러개 한번에 보내니까 훨씬 빠르다. 하지만 병렬 통신 장비를 구현함에 있어서 어렵다.(거리 제한, 많은 비용) 따라서 많은 양의 데이터 통신이 필요하지 않으면 병렬 통신은 비효율적이고, 이러한 이유로 컴퓨터가 외부와 통신할 때 직렬 통신 많이 사용하게 된다. 직렬 통신이란 데이터 비트를 1개의 비트 단위로 송수신 하는 방법으로 구현이 쉽고 멀리 갈 수 있어 비용 절감이 크다. 대표적으로는 LAN, RS232, X25등이 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;직렬통신에는 동기통신과 비동기통신이 있다. 비동기 통신이란 말은 별도의 기준이 되는 클럭없이 서로간에 통신을 한다는 말이다. Rx, Tx, GND(공통접지) 핀이 필요하다. 반대로 동기통신이란 말은 별도의 기준이 되는 클럭이 존재한다는 말이고, Rx, Tx, GND 외에 XCK 선도 한가닥 더 필요하단 말이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USART는 Universal Synchronous/Asynchronous Receiver Transmitter이다. 한글로 바꿔보자면 '범용 동기/비동기 송수신 방식'을 말하는 것엔데, 범용이란 말은 고정된 것이 아닌 가변적인 어떤 것이라 범용성(범용적인 통신)을 가진다는 말이고, 송수신은 양방향 통신이 가능하다는 말이다. UART는 그 중 비동기 통신만을 말하는 것이고, USART는 경우에 따라 클럭에 맞추어 데이터를 보내거나 받을 수 있도록 되어있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RS232C도 specific한 UART방법 중 하나인거다.&lt;/strong&gt; RS232C는 1969년 미국의 EIA (Electric Industries Association)에 의해 정해진 표준 인터페이스로 "직렬 2진 데이터의 교환을 하는 데이터 터미널 장비(DTE)와 데이터 통신장비(DCE)간의 인터페이스의 제반 사항을 규정하는 것" 이라하는데, 여기에서 RS는 Recommended Standard의 약자이고 232는 특정규격의 식별번호이며 C는 버전을 의미한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;TXD - Transmit Data , 통신 데이터 출력 신호
RXD - Receive Data , 통신 데이터 입력 신호
=&amp;gt; 2개의 데이터 신호선

RTS - Ready To Send
모뎀 통신 등에 사용하며 통신 준비 상태를 표시하는데, 범용 출력 포트로 사용 가능
CTS - Clear To Send
모뎀 통신 등에 사용하며 통신 준비 상태를 표시하는데, 범용 입력 포트로 사용 가능

DTR - Data Terminal Ready
모뎀 통신 준비 신호로, 출력 포트로 사용 가능
DSR - Data Set Ready
모뎀 통신 준비 신호로, 입력 포트로 사용 가능
DCD - Data Carrier Detect , 입력 포트

RI - Ring Indicator, 입력 포트
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atmega128에선 USART(2개 USART0, USART1) 지원한다. UART 설정 관련 레지스터를 살펴보자.&lt;/p&gt;
&lt;p&gt;1) 우선 송수신 데이터를 저장하기 위한 UDRn 레지스터는 그림과 같이 Transmit-TxD, Recieve-RxD로 연결되어있다. write용 8bit, read용 8bit이다.&lt;/p&gt;
&lt;p&gt;2) 그리고 각종 설정을 담당하는 Control and Status Register A,B,C가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UCSRnA
        -   bit 7(RXCn): RX핀으로부터 입력된 수신 데이터가 수신 버퍼로 들어와 완전히 채워졌을때 =&amp;gt; while(! (USCR1A &amp;amp; (1&amp;lt;&lt;RXC1))); // 이말은 USCR1A는 USCR1A가 0xㅁㅁ 이런식으로 되어있단 말이네?
        -   bit 5(UDREn): 송신 버퍼가 완전 비었을 때(새로운 데이터를 보낼 준비되었을때)  =&gt; while(!(USCR1A &amp;amp; (1&amp;lt;&amp;lt;UDRE1)));&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UCSRnB 
        - bit 4(RXENn): 수신 활성화
        - bit 3(TXENn): 송신 활성화
        - bit 2(UCSZn2): 송수신 데이터 사이즈 결정 (UCSRnC에 있는 2개 bit까지 포함 총 3개 bit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;UCSRnC
        - bit 5:4(UPMn 1:0): Parity 모드 설정
        - bit 3(USBSn): Stop 비트 1비트로 할지 2비트로 할지
        - bit 2:1(UCSZn1:0): 000 ~ 111 (5, 6, 7, 8bit, Reserved*3, 9bit)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3) UBRRnH(11:8), nL(7:0)  (2개 레지스터)&lt;/p&gt;
&lt;p&gt;USART Baud Rate Register로 모듈의 송수신 속도를 결정한다. 19200bps로 통신하기 위해선..Data sheet를 참고하자!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; 참고
 - 뻔뻔강사 유명환 멘토님 강의자료
 - http://binworld.kr/59
 - 데이터 통신의 종류: http://blog.daum.net/shbaek1009/6766113
 - https://www.google.co.kr/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=7&amp;amp;ved=0CD8QFjAG&amp;amp;url=http%3A%2F%2Fwww.realsys.co.kr%2Fdownload%2Fboard.asp%3Fboard%3Dlecture%26uid%3D335&amp;amp;ei=QHE3VOWoA4Sm8AWmtoGgBg&amp;amp;usg=AFQjCNFuND3cFtNt5t-EyYHF7CNTloVFIQ&amp;amp;sig2=WFhVNtnC0OqeP1Aeg-T6Bw&amp;amp;bvm=bv.77161500,d.dGc&amp;amp;cad=rjt
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Fri, 10 Oct 2014 00:00:00 +0200</pubDate><guid>tag:,2014-10-10:avr-uart.html</guid><category>AVR</category></item><item><title>[AVR] PWM</title><link>/avr-pwm.html</link><description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PWM은 Pulse-Width Modlation, 말 그대로 "펄스의 Width 변조"를 뜻하고, 프로세서에서 나온 디지털 출력을 가지고 아날로그 회로를 제어할 수 있는 기법을 말한다. 그게 무슨 소리냐고? 모터를 생각해보자. 모터는 전압이 높게 걸리면 빨리돌고, 낮게 걸리면 천천히 돈다. 근데 AVR에선 전압 조절이 불가능하다. 0.1V 출력! 2V 출력! 5V 출력! 이런것이 불가능하단 이야기다. 그래서 소프트웨어적으로 펄스 폭 변조를 해주어서 일정 주기 내에 ON/OFF 횟수를 조절해주어서 원하는 목표치의 평균 전압을 내게한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일단 그럼 아날로그 기기는 뭘까?&lt;/p&gt;
&lt;p&gt;가변저항을 달고, 라디오의 음량을 조절한다. 저항의 크기가 변함에 따라서 전류가 &lt;strong&gt;실수값&lt;/strong&gt;을 가지며 변할 수 있다. 이런 것이 아날로그 회로를 가진 기계이다. 반면 디지털 회로는 미리 결정된 집합 {0V, 5V}안에서 값을 가진다.&lt;/p&gt;
&lt;p&gt;아날로그회로를 디지털화하여 제어하면 노이즈에 강하고, 시스템의 가격과 전력소모가 급격하게 줄어든다. (어떻게 그런지는 모르겠으나 왠지 그럴 것 같음. 디지털로 찍으니까...) 아날로그를 디지털화하는 방법은 PWM(Pulse-width modulation) 컨트롤러를 사용하는 것이다. 예를들어 PWM은 &lt;strong&gt;일정 주기&lt;/strong&gt;에서 50% 5V, 50% 0V면 평균 2.5V가 되는 격이다. 80% 5V, 20% 0V면 평균 4V가 된다. 그리고 실제 아날로그 기기도 이에 맞춰 2.5V, 4V처럼 동작한다. &lt;strong&gt;일정 주기&lt;/strong&gt;는 &lt;strong&gt;변조 주파수&lt;/strong&gt;로 정해지는데, &lt;strong&gt;변조 주파수&lt;/strong&gt;가 10Hz면, 0.1초 &lt;strong&gt;주기&lt;/strong&gt;동안 50%는 5V, 50%는 0V이 것이다. 일반적으로 변조 주파수는 1kHZ~20kHz사이에서 사용한다. 그리고 5V가 몇%인지는 duty cycle이라는 용어를 사용하는데, duty cycle=10%라면, {5V,0V}인 디지털 회로에서 0.5V를 출력하게 되는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="image" src="http://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/PWM,_3-level.svg/2000px-PWM,_3-level.svg.png" title="=400x300" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 +0200</pubDate><guid>tag:,2014-10-03:avr-pwm.html</guid><category>AVR</category></item><item><title>[AVR] Timer/Counter</title><link>/avr-timercounter.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;AVR은 어떻게 시간을 잴까? delay_ms(1000)함수는 어떻게 1초가 지난 것을 알까?
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AVR에는 전원만 인가되면 무조건 정해진 주기마다 뛰는 오실레이터가 있다. (보통 칩 내부에 있는데, 칩 내부에 있는 오실레이터는 8MHz를 넘기 어려워서 보드에 달아주기도 한다. 아두이노 우노의 경우 16MHz짜리 오실레이터가 박혀있다.) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16MHz로 가정하자. 그러면 1/16 usec(마이크로 second, \( {10}^{6} \) 마다 한번씩 신호를 주는거다. 이 신호가 올때마다 레지스터에 이때까지 몇번 왔는지 기록한다. 만약 레지스터가 좀 작아서, 최대 16번까지만 기록할 수 있으면(4bit 레지스터) 1usec만 셀수있는거다. 1/16 usec마다 신호가 오는데, 16번 지났으니까 1 usec가 지난거다. AVR이 보통 가지고 있는 레지스터는 8bit, 256번까지 기록하라 수 있는 레지스터다. (Interrupt의 종류엔 Overflow Interrupt와 Output Compare Interrupt 두가지가 있는데, 우선 Overflow 기준으로 설명한다. Overflow는 레지스터가 1111 1111에서 +1이 되어 0000 0000이 되는 순간을 말한다.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그러면 8bit 레지스터는 1/16 * 256 = 16 usec 지난것만 알 수 있다. 그런데 만약 1msec 지난 것을 알고 싶다면? 레지스터를 늘리던, 꼼수를 쓰던 해야한다. 그 꼼수가 바로 prescaler. 그것의 정체는 하드웨어였다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Prescaler" src="http://www.qsl.net/n/n9zia//wireless/pics/prescaler-1.png" title="=400x280" /&gt;&lt;/p&gt;
&lt;p&gt;일단 1msec를 세기위해서, 클럭을 좀 느린 것처럼 만드는 것이다. 예를들어 16MHz에 prescaler 1/64를 씌우면, 0.25MHz가 된다. 이렇게 되면 4 usec마다 신호가 들어오니까, 레지스터에 250번 신호가 들어오면 1msec(4usec*250 = 1000usec = 1msec)가 된 것이다.     TCCR(Timer Count Control Register) 레지스터에 Prescaler 값을 정하는 bit가 있는데, atmega328p(아두이노 우노)의 경우 0 &amp;lt;&amp;lt; CS02 | 1 &amp;lt;&amp;lt; CS01 | 1 &amp;lt;&amp;lt; CS00 로 세팅하면 1/64 prescaler가 동작하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정리해보자. AVR에 전원이 인가되면 오실레이터가 주기적으로 신호를 발생하고, 신호가 발생될때마다 TCNT0 레지스터에 +1씩 증가된다. 그런데 TCNT0가 8bit여서 256개만 카운트할 수 있기 때문에, 이 신호가 좀 늦게와주면 더 오랜 시간을 잴 수 있을 것 같다. 이때 prescaler란 하드웨어로 신호 발생 주기를 바꿀 수 있는 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마지막으로 예제 코드를 참고하자. avr-gcc로 돌아가는 atmega328p용 코드이다.          &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;avr/io.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;avr/signal.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;avr/interrupt.h&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// PF0 ~ PF7은 61 ~ 54번 핀&lt;/span&gt;
&lt;span class="cp"&gt;#define DDR_LED     DDRD&lt;/span&gt;
&lt;span class="cp"&gt;#define PORT_LED    PORTD&lt;/span&gt;
&lt;span class="cp"&gt;#define PIN_LED     PIND&lt;/span&gt;

&lt;span class="cp"&gt;#define CPU_CLOCK   16000000    &lt;/span&gt;&lt;span class="c1"&gt;//16M&lt;/span&gt;
&lt;span class="cp"&gt;#define TICKS_PER_SEC   1000        &lt;/span&gt;&lt;span class="c1"&gt;//나는 지금 1초에 1000번의 틱을 만들고 싶다. 이말인 즉슨, 1/1000초에 1번의 틱(=interrupt)이 발생한단 말이다!&lt;/span&gt;

&lt;span class="cp"&gt;#define DDR_LED   DDRD &lt;/span&gt;&lt;span class="c1"&gt;//_SFR_IO8(0x0A) 이렇게 주소값임&lt;/span&gt;
&lt;span class="cp"&gt;#define PORT_LED  PORTD&lt;/span&gt;
&lt;span class="cp"&gt;#define PIN_LED   PIND&lt;/span&gt;

&lt;span class="c1"&gt;// 전역 변수 선언, avr-gcc 전역변수에선 반드시 volatile을 선언해야한다!&lt;/span&gt;
&lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tic_time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// timer0가 오버플로우되면 호출되는 함수 (1msec 마다 호출된다! TICKS_PER_SEC가 1000이기 때문에)&lt;/span&gt;
&lt;span class="n"&gt;ISR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIMER0_OVF_vect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tic_time&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//1ms마다 tic_time++&lt;/span&gt;

    &lt;span class="c1"&gt;// timer 시작 값 초기화, 1/CPU_CLOCK * 64 * n = 1/1000 sec&lt;/span&gt;
    &lt;span class="n"&gt;TCNT0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CPU_CLOCK&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;TICKS_PER_SEC&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Output compare match mode 일땐 자동으로 Clear 시킬수 있으니까 초기화 안시켜도 됨.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ms단위의 delay함수&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;delay_ms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;msec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tic_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msec&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tic_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;led_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//출력 off&lt;/span&gt;

    &lt;span class="n"&gt;DDR_LED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// LED 포트를 출력 모드(=1)로 설정&lt;/span&gt;
    &lt;span class="n"&gt;PORT_LED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// LED 포트 초기화&lt;/span&gt;

    &lt;span class="c1"&gt;// 1. Register 세팅&lt;/span&gt;
    &lt;span class="n"&gt;TCCR0A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;WGM01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;WGM00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Waveform Generation: Normal (Overflow 타이밍에 관련된)&lt;/span&gt;
    &lt;span class="c1"&gt;//WGM00: 앞에 0은 타이머/카운터0 (4개니까 0~3), 뒤에 0은 WGM01과 함께 2비트 (4가지 경우)&lt;/span&gt;

    &lt;span class="n"&gt;TCCR0B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;CS02&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;CS01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;CS00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prescler 1/64&lt;/span&gt;
    &lt;span class="n"&gt;TCNT0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CPU_CLOCK&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;TICKS_PER_SEC&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// timer 시작값 초기화&lt;/span&gt;
    &lt;span class="n"&gt;TIMSK0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;OCIE0A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;OCIE0B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;TOIE0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output compare interrupt가 아니기 떄문에 OCIE0A,0B 모두 0으로 set. 오버플로우 인터럽트를 사용할 것이므로 TOIE0을 1로 set. (TOIE0를 1로 세팅한다는 이야기는 활성화하겠다는 이야기!)&lt;/span&gt;
    &lt;span class="n"&gt;TIFR0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;TOV0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;//Overflow interrupt set이긴 한데, 아직 역할이 규명되지 않음. &lt;/span&gt;

    &lt;span class="c1"&gt;// 2. 이제부터 인터럽트를 허용한다!&lt;/span&gt;
    &lt;span class="n"&gt;sei&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// 3. 1초 마다 LED toggle&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// LED를 toggle&lt;/span&gt;
        &lt;span class="n"&gt;led_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;led_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;PORT_LED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// 1000ms = 1초 기다림&lt;/span&gt;
        &lt;span class="n"&gt;delay_ms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 +0200</pubDate><guid>tag:,2014-10-03:avr-timercounter.html</guid><category>AVR</category></item><item><title>Prime Number</title><link>/prime-number.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;중학교 수학1 과외 준비를 하면서, 첫번째 녀석으로 &amp;quot;소인수 분해&amp;quot;를 마주했습니다.
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;모든 수는 소수의 곱으로 표현되는가? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fundamental theorem of arithmetic: Every integer greater than 1 is a prouct of primes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mathematical induction으로 증명하자!&lt;br /&gt;
(induce: 설득, 유도하다.)&lt;/p&gt;
&lt;p&gt;1) n=2일때 성립한다!&lt;/p&gt;
&lt;p&gt;2) 1에서 n(n&amp;gt;=3)사이 모든 자연수가 성립한다고 가정하자. 만약 n이 prime이면, ok. 아니라면, n=ab (a,b는 1 &amp;lt; a &amp;lt;= b &amp;lt; n인 integer)인데, 우리가 했던 가정에 따라, a=p1p2...pj, b=q1q2...qk로 product of primes이다! 그러므로 n=ab=p1p2...pjq1q2...qk는 product of primes라고 할 수 있다!&lt;/p&gt;
&lt;p&gt;이로써 existence가 증명되었다! (&lt;a href="http://en.wikipedia.org/wiki/Fundamental_theorem_of_arithmetic#Proof"&gt;증명 더보기&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4"&gt;에라토스테네스의 체&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prime number의 권위, 암호로 사용? Public Key라고 많이 들어봤을지도 모르겠다. Prime number가 바로 이 Public Key에 사용된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Sun, 28 Sep 2014 00:00:00 +0200</pubDate><guid>tag:,2014-09-28:prime-number.html</guid><category>Math</category></item><item><title>도가철학</title><link>/dogaceolhag.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;  이 글의 내용은 서강대학교 최진석 교수님의 도가철학 수업을 청강하며 강의 내용에 제 생각을 보태어 해석하고, 재구성한 것으로 교수님의 실제 강의 내용과 다를 수도 있음을 알리는 바입니다. (2014-12-09 종강)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2014-09-11&lt;/p&gt;
&lt;p&gt;믿음에서 생각으로, 신에서 인간으로, 신화에서 철학으로&lt;/p&gt;
&lt;p&gt;어떻게 세상을 지성적 레벨로 이야기 했는가.&lt;/p&gt;
&lt;p&gt;철학이 시작되었다는 것은, 신으로 부터 독립을 시작했다는 말이다.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2014-09-16&lt;/p&gt;
&lt;p&gt;cafe.daum.net/bookofchange&lt;/p&gt;
&lt;p&gt;존재근거 = 본질 = essence = 엑기스 ㅋ&lt;/p&gt;
&lt;p&gt;어떤 것을 다른 것이 아니라, 바로 그것이게 해주는 성질&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2014-09-22&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;공자의 본질&lt;/p&gt;
&lt;p&gt;그것을 그것일 수 밖에 없게 만드는 것, 우리는 이를 철학적 테크니컬 텀을 &lt;strong&gt;본질&lt;/strong&gt;이라 한다. 예를 들어, "본질적으로 인간은 이성적이다."라고 말하면 이성이야말로 인간을 인간이게 만드는 성질로 보는 것이다. 그런데 이 '본질'을 긍정하면, 논리적으로 긍정할 수 밖에 없는 것들이 존재한다. 본질을 긍정하게 되면, 어떤 현상에 대해 정의내리는 일은 긍정적이다. (직선은 무엇이냐, 인간은 무엇이냐 등의 무엇(What)에 관한 질문은 본질을 알고 싶은 것이다.) 그리고 정의하는 것을 긍정하면, 기준을 긍정하게 되고, 기준을 긍정하면 구분을 긍정하게 된다. 그리고 구분을 긍정하면 언어를 긍정할 수 밖에 없다. 그렇게 '바람직함', '해야함', '좋음' 등이 긍정된다. 공자가 임의적으로 설정한 내용이 아니라, 이러한 설정이 될 수 밖에 없는 구조. 그것을 파악하기 위한 텀, '인'을 이해해야한다. 공자에게 '인'이 본질이다. 공자는 보편적 신념을 긍정하였고, 예에 맞지 않으면 보지도, 듣지도, 말하지도, 움직이지도 말라고 했다. 자신을 극복하여, 예에 도달하자(극기복례)고 설파했다. 공자철학은 극기복례로 요약할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;무엇이 철학적 태도인가. 내가 철학적으로 깨달은 것을 남들에게 주입하는 것은 정치적 태도이다. 왜 그것이 나올 수 밖에 없었는지 구조를 꿰뚫는 것이 철학적 태도이고, 그렇게 생각하게 도와주는 것이 철학적 태도이다.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;그렇다면 노자는 본질을 긍정하지 않는가? 그렇다. 노자는 비본질을 긍정한다. 본질적인 것은 없고, 관계가 존재한다고 보는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;노자의 비본질&lt;/p&gt;
&lt;p&gt;우리나라에서 미니스커트를 최초로 입은 여성, 윤복희는 미친놈이었다. 이는 시대를 지배하고 있는 질서하고 전혀 맞지 않는 것이었다. 윤복희는 격을 깬것이었다. 말그대로 파격(破格)이었다. 어떤 파격 현상은 noise고, 어떤 파격 현상은 signal이 된다. signal이 되는 경우, 지지자들이 나타나고 code가 되고 사회 변화를 보여주게 된다. 미니스커트는 signal이 되었다.&lt;/p&gt;
&lt;p&gt;모든 파격 현상은 악의 얼굴을 하고 나타난다. 가치판단은 이미 기득권을 가지고 있는 메인스트림이기 때문이다. 그들은 미풍양속을 헤친다고 말한다. 주류를 지키기 위한 단체가 경찰이었다. 서브 스트림이 메인 스트림으로 들어올때 쯤 "유행"이란 말이 나온다. 유행으로 자리잡는 순간, 기준이 되고, 이데올로기가 되고, 권력으로 발전한다. 이데올로기의 가장 소박한 정의는 '그것에 대해 반응하지 않으면 불편해지는것'이라 말할 수 있겠다.&lt;/p&gt;
&lt;p&gt;모든 기준은 첫번째로 구분하고, 두번째로 배제하고, 세번째로 억압한다. 구분, 배제, 억압은 항상 같이 다니는 녀석들이다. 그렇게 차등화가 이루어진다. 노자는, 도덕경에서 이렇게 말한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;모든 사람들이 아름답다고 하는 것을 아름답다고 알면, 그것은 추한 것이다.
모든 사람들이 선하다고 하는 것을 선한 것으로 알면, 그것은 선하지 않은 것이다.

* 교수님이 해석한 노자의 생각
&amp;#39;인간이 삶을 지배할 새로운 질서를 구축하는데, 공자 너는 도덕적 자각 능력으로 극기복례 시스템을 구성하지. 그런데 합의된 선을 만드는 순간, 합의된 아름다움을 만드는 순간, 보편적 기준으로 작용할 수 밖에 없다. 그것은 사회를 구분하고 차등화한다. 그 사회에서 갈등과 경쟁, 폭력을 피할 수 없다. 모든 기준은 폭력이다.&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;학교, 감옥, 정신병원은 공자적이다. 사회 기준(학교에선 학점으로)에 안맞는 사람들을 격리시킨다. 감옥, 정신병원, 학교에선 구분과 배제와 억압이 기능하기 때문이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;공자 왈&lt;/strong&gt;, 누구나 합의한 기준을 정하자. 인간의 본성에서 나온 것이기 떄문에 선한것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;노자 왈&lt;/strong&gt;, 기준을 제거하자! 아무리 좋더라도 폭력이다. 기준을 까부수자! 저것은 버리고 이것을 취하라. 우리의 시선은 저곳이 아닌 이곳이어야한다.&lt;/p&gt;
&lt;p&gt;교수님이 1998년 서강대 오셨을 때, 교수님 가족은 꿈이 있었다. 집을 사는 꿈. 꿈을 위해 많은 것들을 포기할 수 밖에 없었다. 그리고 2년 뒤 깨달았다. 그것이 불가능하다는 것을. 그때부터 '자, 우리집은 꿈이 없다.'하고  처음으로 가족이 비엔나 소년 합창단을 갔다. (소년들이라 쌀 줄 아셨다고 하심 ㅋㅋ) 소고기도 먹고, 아내 옷도 사주시고, 아들 롤러브레이드도 사주셨다고 한다. 꿈이 있다면, 모든 일상이 꿈의 관리와 지배를 받게 된다는 사실을 깨달으셨단다. &lt;strong&gt;기준으로 행사되었던 꿈이 사라지니까, 죽어있던 일상들이 모두 살아났다고.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;궁금한 점.

일상이 죽었다가 살아서 좋은 것 아닌가? 꿈이 애초에 없었다면, &amp;#39;아 살아있는 일상이 좋은것이구나!&amp;#39;고 깨달을 수 있을까? 결국엔 기준을 제거하고 싶지만, 기준이 있었기 때문에 행복했던 것이 아닐까?
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;2014-09-24&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;공자가 이런 말을 하고 저런 말을 한 것이 중요한 것이 아니라, 공자가 그런 말을 할 수 밖에 없는, 세계와 관계하게 만든 자신의 세게관을 이해해야 한다. 본질을 긍정하면, 이상이 필요하다고 했다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;본질 (-&amp;gt; 논리) -&amp;gt; 이상
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;'본질을 받아들이는 한, 이상적인 단계를 설정할 수 밖에 없다."고 말하고 싶을때 논리가 필요하다. 본질 = 존재근거인데, 본질을 긍정하면 그 본질은 보존되고 유지되고 확장되어야 한다. 확장은 발전이며, 이상적인 단계를 뜻한다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;* 이 대목에서 궁금한 점이 생겨 교수님께 메일을 보냄

안녕하세요 교수님, 도가철학을 듣고 있는 20081397 정헌재입니다. 매번 생각할 수 있는 좋은 수업해주셔서 진심으로 감사드립니다. 사실 오늘 배운 내용 중 (수업시간에 잠깐 질문하긴 했지만..) 궁금한 점이 아직 안풀려서 이렇게 메일을 드립니다. 아래는 오늘 말씀하신 내용입니다.

&amp;quot;본질을 긍정하면, 그 본질은 보  존되고, 유지되고, 확장되어야 한다. 확장(=발전)되어야 하기에 이상적인 세계가 긍정된다.&amp;quot;

보존되고, 유지되지 않으면 본질은 사라지기 때문에, 본질을 긍정하면 그 본질이 보존되고 유지되어야한다는 것은 받아들일 수 있을 것 같습니다. 하지만, 확장되지 않는 본질이 사라지는 것이 아니고, 부정되는 것도 아닌데 왜 확장되어야하나요? 확장은 유지나 보존을 위한 보험같은 것 아닌가요? 즉, &amp;#39;확장&amp;#39;은 (본질적으로) &amp;#39;본질&amp;#39;이 &amp;#39;본질&amp;#39;로서 존재하게 하는 이유가 아니지 않나요? 확장하지 않는다고 존재하지 않는 것도 아닌데, 확장을 존재론적으로 선이라고 말할 수 있는건가요? 마치 어떤 종족이 많이 번식할 수록, 지구상에 오래동안 존재할 수 있는 것과 같은 이치로 보면 되는 걸까요? 그렇게 생각해도 찝찝한 것은 아직 &amp;#39;생명체&amp;#39;와 &amp;#39;본질&amp;#39;을 동일시 할 수 없어서 인 것 같습니다. 조금 이상한 질문인 것 같긴한데...ㅎㅎ;; 남아있는 찝찝한 마음에 이렇게 메일을 올립니다.

참, 그리고 공자와 노자가 각자의 철학을 설파하는데, 가지고 있던 공통적인 질문은 &amp;quot;세상은 어떻게 존재하는가&amp;quot;인가요? 수업 도중 갑자기 궁금해져서 질문드립니다.

읽어주셔서 감사합니다 교수님! 즐거운 주말 보내세요!
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다시 노자&lt;/p&gt;
&lt;p&gt;1) 공자는 세상은 본질을 토대로 존재한다. = 이상이 있을 수 밖에 없다.&lt;/p&gt;
&lt;p&gt;본질은 그 대상 자체에 들어있다. 그것이 그것인 이유가 다른 곳에 있지 않고, 그것에 있다.&lt;/p&gt;
&lt;p&gt;2) 노자는 세상은 관계적으로 존재한다. = 유무상생&lt;/p&gt;
&lt;p&gt;크다 작다는 상대적인 것이지, 이것이 관계론! &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;대표적인 관계론 철학의 대표들 
노자, 장자, 주역, 양자역학, 불교, 포스트 모더니즘
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;본질팀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;스카프라는 이름은 스카프ness를 반영한다.&lt;/p&gt;
&lt;p&gt;석쇠라는 이름은 석쇠ness를 반영한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;관계팀&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;스카프? 그냥 가로실과 세로실이 만났을 뿐이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;도덕경 1장,
도가도비상도, 명가명비상명

우리가 건립하려는 &amp;#39;도&amp;#39;를 개념화 할 수 있으면, 그것은 도가 아니다.
어떤 이름이 개념화할 수 있으면 (정의할 수 있으면) 그것은 진정한 이름이 아니다.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;우리나라 가요계 사랑을 연구한 두 사람&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;나훈아&lt;/p&gt;
&lt;p&gt;사랑이 뭐냐고 물으신다면, 눈물의 씨앗이라고 말하겠어요.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;심수봉&lt;/p&gt;
&lt;p&gt;사랑밖에 난 몰라&lt;/p&gt;
&lt;p&gt;사랑보다 더 슬픈건 정이라고요&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;니체 왈, 모든 언어 행위는 폭력이다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;de+fine = 울타리를 친다. (fine = 울타리)&lt;/p&gt;
&lt;p&gt;'산'이라는 개념을 가지고 있지만, 그것이 산의 실체는 아님.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;시작이나 출발이라는 것은 그것 자체의 실체로 존재하지 않는다. 그 경계에 추상적으로 존재할 뿐이다. 가위가 종이를 자르는 &amp;#39;시작&amp;#39;하거나, 달라기 &amp;#39;출발&amp;#39;한다. 시작과 출발은 실재하지 않는다. 그 자체로 존재하지는 않지만, 엄청 중요한 역할을 한다.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음시간엔 유와 무에 대한 이야기를 더 해봅시다!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;이 세상에 변하지 않는 진리는 없다. 이 명제는 자체 모순인가? Nope! 언어를 사용하는 Layer 층이 다르다고 생각함.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;2014-09-30&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;노자 왈,&lt;/p&gt;
&lt;p&gt;"신념, 이념, 일정한 가치관이나 기준있는 사회는 사회가 경색되고, 진보를 방해한다. 그것들은 모두 조작된 것이다.    세계는 본질적 토대로 존재하는 것이 아니라, 관계로 존재한다."&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ex) 노자, 주역, 장자, 불교, 니체, 양자역학, 포스트모더니즘
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주역 왈,&lt;/p&gt;
&lt;p&gt;이 세상의 모든 것은 양과 음의 관계로 되어있다. 본질들끼리의 관계되어 있는것이 아니라, 그것 자체가 관계로 존재한다는 말. 그것을 이해해야한다.&lt;/p&gt;
&lt;p&gt;음기와 양기를 무게로 단다면 음기가 무거울 것이다. 남자는 양의 덩어리지만, 앞이 음 뒤가 양. 여성은 음의 덩어리지만, 앞이 양 뒤가 음. 그래서 익사한다면 여성은 누워서 떠오르고, 남성은 엎드려서 떠오른다. 수렴하고 감싸지면, 음. 손바닥은 음! 모든 것들은 음과 양으로 이루어져있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;노자가 말하는 '관계'는 무엇인가?&lt;/p&gt;
&lt;p&gt;'무엇으로 존재하는가'는 의미없다. 어떻게 존재하는가가 중요하다. 본질일땐 '무엇'이 따라올 수 밖에 없다. 노자는 관계이기 때문에 '어떻게'가 중요하다. 이 세계는 무가 발생시킨다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문은 외부와 내부의 경계에 있다. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;2014-10-02 &lt;/p&gt;
&lt;p&gt;비와서 결석&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2014-10-07&lt;/p&gt;
&lt;p&gt;제주도 가서 결석&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2014-10-14&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ko.wikipedia.org/wiki/%EB%AF%B8%EC%85%B8_%ED%91%B8%EC%BD%94"&gt;미셸푸코&lt;/a&gt;가 이런말을 한다.&lt;/p&gt;
&lt;p&gt;"아름다움은 추함을, 부는 빈곤을, 영광은 치욕을, 앎은 무지를 은폐한다." &lt;/p&gt;
&lt;p&gt;"화가와 시인들의 기발한 착상은 광기의 완곡한 표현이다." &lt;/p&gt;
&lt;p&gt;그는 우리가 흔히 말하는 &lt;strong&gt;소수&lt;/strong&gt;였다. 그가 바라보기엔 정신병원, 감옥, 학교 모두 배제와 억압을 할때, 정당화하는 도구가 되는 곳이 었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;종속적 주체, 앞으로의 현대는 능동적 주체로 나아가야한다.&lt;/p&gt;
&lt;p&gt;능동적 주체? 사회 전체를 지배하는 보편적 이념, 그리고 기준. 이것들이 각자 개별자들에게 내면화되어있는 것에 불과하다. 자기 행위의 법조문을 자신이 생산할 수 있어야한다. 그것이 진정한 능동적 주체이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;공자 왈, &amp;quot;선으로 채워진 보편적 이념을 내면화하라!&amp;quot;
노자 왈, &amp;quot;선으로 채워진 보편적 이념은 너를 종속적으로 만들것이다. 우리 모두 입법자가 되어야한다.&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;노자의 도덕경 중, 무위이무불위(무위를 하면 되지 않는 일이 없다.)&lt;/p&gt;
&lt;p&gt;노자의 최종 목표는 천하를 차지 하는 것이다. 공자의 '바람직함 좋음 해야함'의 이념으로는 천하를 가질 수 없고, 구성원들에게 하고 싶은것을 할 수 있게 해주라 하였다. 동양철학은 항상 깊이 현실에 발을 두고 있고, 그렇기에 통치에 관계되어있다. 노자의 리더쉽은 구성원들을 자발적 참여자로 만들어내는 것이었다. 현대인들은 자신이 하는 일이 자신의 존재를 증명하지 않으면, 살 수 없는 존재들로 이동하고 있다. 그렇기에 조직을 작게 관리한는 것을 강조하였다. 작은 조직안에 있을때 내가 하고 있는 활동을 통해 만들어지는 생산물과 느낌이 나에게 직접적으로 돌아올 수 있다. (노자 80장 참고)&lt;/p&gt;
&lt;p&gt;재정권과 인사권이 누구에게 있는가에 따라 중앙집권인지 아닌지&lt;/p&gt;
&lt;p&gt;조직을 작게 만들고, 자신이 하는 일이 회사의 일이 아닌 자신의 일이라고 생각하게 해야함&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;공자/우리: 바람직함 해야함 좋음 =&amp;gt; 이념
노자/나: 바라는것 좋아하는것 =&amp;gt; 일상
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;바르게 살자라는 슬로건이 많다는 것은?&lt;/p&gt;
&lt;p&gt;집단적 지배력이 해소되지 않은 나라의 특징 =&amp;gt; "플랜카드가 무지 많다."&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유무상생, 거빈취지, 소국과민(나라를 작게 다스려라)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;2014-10-28&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;사람은 한 순간이라도 멋스럽지 않은 것, 폼나지 않는 것은 하면 아니된다! 능력있는 사람보다 더 파워있는 사람은 멋있는 사람. 작은 일 하나하나 멋있게 하자! 소주 한 잔, 펜을 드는 일까지. 말하지 않아도 힘을 발휘할 수 있어야한다.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;세상이 매우 복잡 다양한데, 인간이 어떤 패턴에 의해 하나로 묶는 능력을 범주화(Categorize)라고 한다. 이는 인간에게 유사성을 포착하는 능력이 있기 때문이다. (컴퓨터가 아직 인간을 따라가지 못하는 능력! 컴퓨터에겐 동일성을 포착하는 능력뿐이다.)&lt;/p&gt;
&lt;p&gt;&lt;img alt="파르테논 신전" src="http://cfs7.blog.daum.net/upload_control/download.blog?fhandle=MEhxY2xAZnM3LmJsb2cuZGF1bS5uZXQ6L0lNQUdFLzEvMTU5LmpwZy50aHVtYg==&amp;amp;filename=159.jpg" /&gt;&lt;/p&gt;
&lt;div class="center"&gt;
단순함의 끝, 파르테논 신전
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;"단순하다. = 추상의 정점이다. = 고도로 지적이다."&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;중국과 이집트에서 수학이 발전했음에도 불구하고 그것이 과학적 성취로 이어지지 못한 이유는 연산과 대수학을 구체적인 사건을 처리하는데만 사용하고, 세계를 이해하는 것으로 보편화하지 못했기 때문이다. 이는 추상화 능력의 차이다!&lt;/p&gt;
&lt;p&gt;'어떤 범주로 이루어져 있는가' &lt;/p&gt;
&lt;p&gt;범주란 고도로 발휘된 추상화의 결과들이고, 지적 성취물의 결과들이다. 지적이지 않으면 = 추상화되지 않으면 = 사람이 번잡하고 복잡하다. 유사성을 파악하는 능력은 범주화, 추상화로 연결된다. 지적인 인간으로 만들어주는 능력 유사성이며, 유사성을 어떻게 확장할 것인가의 문제는 중요하다.&lt;/p&gt;
&lt;p&gt;은유란 어떤것과 다른것을 어떤것에 연결하는 행위다. 예를 들면 시간은 돈이다 처럼. 은유를 한다는 것은 유사와 비유사성을 들락거리는 일이다&lt;/p&gt;
&lt;p&gt;은유만이 이 세계를 확장할 수 있다. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;#39;논증&amp;#39;은 이미있는 사고와 이미 있는 개념들은 연결하는 일 (확실성)
&amp;#39;은유&amp;#39;만이 새로운 세계를 만들 수 있다. (확장성)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;탁월한 인간은 논증하는 인간이 아닌, 이야기하는 인간이다.&lt;/p&gt;
&lt;p&gt;공자가 쓴 논어(맹자가 쓴 맹자)는 소설, 논문, 읽어야하는 것
노자가 쓴 도덕경(장자가 쓴 장자)은 시, 이야기, 노래해야하는 것&lt;/p&gt;
&lt;p&gt;장자는 왜 이야기했는가? 다음시간부턴 이야기 책으로써의 장자를 배운다.&lt;/p&gt;
&lt;p&gt;유사성은 인간이 발휘하는 지성적 활동이고, 지성적 활동을 통해 인간은 고도의 철학적 단계, 예술적 승화에 이를 수 있다. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2014-10-30&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;인간의 탁월함은 은유와 비유에서 비롯된다. 그렇기에 우리는 이 은유와 비유를 빨리빨리 포착하는 사람을 천재라고 할 수 있다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뭔가 쓰려고 애쓰니까 글이 안써지는 것이다. 경쾌하고 힘있는 문장을 위해선 무엇을 뺄지 고민해보자. 추상화에는 많은 힘이 들어간다. 지적으로 고양된 사람은 기품있고 매력있다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 전에는 없던 말이 생겼다는 것은 세계에 적응하는데 새로운 생존전략이 필요했다는 의미이다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연애를 하게 되면 완전히 새로운 세계가 열린다. 기존의 문법이나 관념으로는 받아들이기 어려운 세계가 열리는 것이다. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;2014-11-25&lt;/p&gt;
&lt;p&gt;소마 1차 최종발표로 인해, 굉장히 오랜만에 옴. 앞으로 잘 와야지.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2014-12-04&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;우리가 지금 말하고 있는 것은 '마음'에 대한 이야기입니다. 많이들 묻습니다. '마음의 평화'은 언제오나요? 장담하건데 그런 건 안 옵니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;프레온 가스는 완벽해서 문제가 된다. 만들어졌는데, 사라지지 않아서 문제가 되는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;마치 어떤 진리의 수행자같은 표정을 짓는 사람, 장자에겐 비판받는다. 그만큼 협소한 것으로 시야가 좁혀져 있기 때문이다. 가장 큰 문제는, 본인이 얼마나 좁은지 각성하지 못하는 것이다. 니체가 말하기를, 정의로운 사람은 경청하는 사람이고, 친절한 사람이라고 했다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;장자가 보기에 이 세계는 살아있는 것들이 제 생명력을 토해내면서, 뒤엉켜있는것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;헤어졌다 만난 인연에게 하는 말 중 가장 촌스러운 말, "그 동안 어떻게 지냈어?" 이는 세상을 본인의 소유적 상태로 바라보는 것이다. 이 얼마나 좁은 마음인가!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;'장자'는 절대 자유에 도달하고자 하는 책 중 하나이며, 이를 읽는 것은 마음의 두께를 만드는 일이다. 운동, 예술, 인문학을 하는 이유 모두, 마음의 두께를 만들기 위함이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;순발력있고, 유연한 사고를 한다? 철학으로 마음을 키워라!&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지식인은 항상 잘못된 것에 자신이 가서 그 잘못된 것을 고쳐야 한다. 큰 계몽이 필요한 제3세계에 지식인이 필요하다. 대표적인 예로 한국이 그러했다. 지식인은 다스려진 곳에선 떠나고, 다스려지지 않은 곳에 가야한다. ex) 20세기 유일한 혁명가, 체 게바라. 왜? 그는 자신이 혁명되어있었기 때문이다. 문학과 수행으로 자신을 튼튼히했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;방심하면 결국 지식 체계가 요구하는 곳으로 가고, 나는 어디로 가고 있는지 잊어버린다. 그렇게 자신이 없도록 만들어진 채 계속해서 우왕좌왕하는 인생을 살게된다. 그렇게 &lt;strong&gt;찰진 인생&lt;/strong&gt;을 살지 못한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;아는 건 많은데, 마음의 두께가 얇은 사람은 언제나 '방정맞다'&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자기 이야기는 평생 자기가 안하는 것이 좋다. 말을 하는 순간, 가벼워진다. 그리고 점점 눈매가 깊어진다. 원래 내가 나를 보는 아이큐가 130이면, 다른 사람을 보는 아이큐는 1억 3천이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;심재하라! &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;부디 심재에 대해 알려주십쇼. &lt;/li&gt;
&lt;li&gt;너는 잡념을 없애고, 마음을 포기해라.&lt;/li&gt;
&lt;li&gt;귀로 듣지말고, 마음으로 듣거라.&lt;/li&gt;
&lt;li&gt;마음으로 듣지말고, 기로 듣도록해라.&lt;/li&gt;
&lt;li&gt;귀는 소리를 들을 뿐이고, 마음은 밖에서 들어오는 것을 해석할 뿐이다.&lt;/li&gt;
&lt;li&gt;기는 공허하여 무엇이든 받아들인다. &lt;/li&gt;
&lt;li&gt;어떤 임의적인 판단이 들어가지 않은 채, 어떠한 틀도 만들지 말고 받아들여라.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;2014-12-09 (마지막 수업)&lt;/p&gt;
&lt;p&gt;우리는 이 수업에서 자유로운 인격에 대해 이야기 하고 있다.&lt;/p&gt;
&lt;p&gt;"심재하라."&lt;/p&gt;
&lt;p&gt;심재한다는 것은 무엇인가. 장자는 이렇게 말한다. &lt;/p&gt;
&lt;p&gt;먼저 마음을 하나로 모으라. 귀로 듣지 말고 마음으로 들어라. 다음엔 마음으로 듣지 말고 기로 들어라. 귀는 고작 소리를 들을 뿐이고 마음은 고작 사물을 인식할 뿐이지만 기는 텅비어서 무엇이든 받아들이려 기다린다. 도는 오로지 빈곳에만 있는 것. 이렇게 비움이 곧 심재이니라. (인간세)&lt;/p&gt;
&lt;p&gt;가치의 결탁물, 관념의 덩어리, 기준의 수행자로부터 벗어날 떄, 그럴때 오직 '내'가 드러난다. 그 상태가 제공하는 쾌감, 행복, 자유가 위대함과 탁월함의 결과물, 수월성, 지배력, 예술이 움직이는 레벨에 도달하게 한다. 그러지 못할 경우, 구조를 만들거나 지배하지 못하고, 어떤 구조의 한 부분을 차지할 뿐이다. 칸트가 어쨌다. 데카르트가 어쨌다. 오바마가 어쨌다. So what? 그래서 너는 어떻다는거냐. 가짜를 평생 마주하기 전에 헤어지라. 아주 천박한 사람이므로.&lt;/p&gt;
&lt;p&gt;Frame이 있으면, 봐야하는대로 보게 된다. 그것을 살해하는 사람만이 세상이 보여지는대로 볼 수 있다. 자유로운 사람은 시공간을 초월한다. &lt;/p&gt;
&lt;p&gt;따지고보면, 역사가 진보하는데 지식인이나 이념가들이 기여한게 그닥없다. 그들은 역사 진보의 발목을 잡았을 뿐. 약간은 무식해도 행동하는 사람들이 인류의 모든 역사를 만들었다. 지적 활동만 하게 된다면 지식에 함몰될 가능성이 매우 높다.&lt;/p&gt;
&lt;p&gt;"오묘한 어둠 속에서 홀로 사물을 보고, 소리 없는 고요속에서 홀로 소리를 듣는다."&lt;/p&gt;
&lt;p&gt;모든 창조적 행위자는 아직 등장하지 않은 문법을 먼저 본 사람이다. 아직 열리지 않은 Frame은, 현재 문법으로 해석되지 않기에, 현재 Frame에 있는 사람들에겐 아무 소리도 없는거나 마찬가지이다. 오리무중 속에서 홀로 조화로운 소리를 듣는것이다. 이는 모든 영웅이 고독한 사람이 아닐 수 없는 이유이다. &lt;/p&gt;
&lt;p&gt;마지막으로 묻겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"니가 너냐"&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">hunjae</dc:creator><pubDate>Mon, 22 Sep 2014 15:10:00 +0200</pubDate><guid>tag:,2014-09-22:dogaceolhag.html</guid><category>최진석</category><category>taoist philosophy</category></item></channel></rss>